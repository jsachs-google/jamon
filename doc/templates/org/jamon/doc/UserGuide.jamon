<%extends _Base>
<%class>
  protected Section currentSection() { return Section.DOC_USERGUIDE; }
</%class>
<%override title>Jamon User's Guide</%override>

<h2>User Guide</h2>

    <h3>Invoking templates from Java</h3>

    <ol>
      <li>
        First, make sure you have preprocessed the top-level templates
        into their Java equivalents.
      </li>
      <li>
        When building your project, be sure to include the generated
        source files in the build process.
      </li>
      <li>
        <i>Optional</i>
        Create a TemplateManager instance (e.g. the
        <a href="javadoc/org/jamon/RecompilingTemplateManager.html"
        >RecompilingTemplateManager</a>), and configure it
        appropriately
      </li>
      <li>
        Create an instance of the template, set any
        optional arguments, and invoke its render method.
      </li>
    </ol>
    <h4>Example</h4>

    Suppose the template in
    <code>templates/org/foo/templates/Foo</code> contains

    <pre class="template"><&| /org/jamon/escape/Html &><%LITERAL>
<%args>
  int count;
  String name = "Somebody";
  String greeting;
</%args>
<html>
  <body>
    <%for int i = 1; i <= count; ++i %>
      <% i %>. <% greeting %> <% name %> <br />
  </%for>
  </body>
</html></%LITERAL></&></pre>
    This can be processed into a Java interface with the
    Jamon <code>TemplateProcessor</code> class, e.g.
  <pre class="tty">
java org.jamon.TemplateProcessor --destDir=./gensrc \
  --srcDir=templates templates/org/foo/templates/Foo
</pre>
which will place the generated Java source file(s) into the
<code>gensrc</code> directory.
<p>
You can then use the template as follows:
        <pre class="code">
import org.foo.templates.Foo;
import org.jamon.RecompilingTemplateManager;
import org.jamon.TemplateManager;
import org.jamon.TemplateManagerSource;

  ...
       TemplateManager manager = new RecompilingTemplateManager(...);
       TemplateManagerSource.setTemplateManager(manager);
       Writer writer = new OutputStreamWriter(System.out);
       Foo foo = new Foo();
       foo.setName("Duke & Co.");
       foo.render(writer, 3, "Hello");

       // alternatively:
       foo = new Foo();
       foo.setName("Duke & Co.");
       org.jamon.Renderer r = foo.makeRenderer(3, "Hello");
       r.renderTo(writer);

       // or even:
       foo = new Foo();
       foo.setName("Duke & Co.");
       String value = foo.makeRenderer(3, "Hello").asString();
       writer.write(value);
</pre>

    <p>
      When you build your project, be sure to include the java files
      in the <code>gensrc</code> directory in the compilation command.
    <p>
      Execution of the above code snippet produces the output
    <pre class="tty"><&| /org/jamon/escape/Html &>
<html>
  <body>
    1. Hello Duke &amp; Co.<br />
    2. Hello Duke &amp; Co.<br />
    3. Hello Duke &amp; Co.<br />
  </body>
</html></&></pre>

<h3>Changing the default escaping mechanism</h3>

Suppose the we wanted to include some text for inclusion in an email.
Since we are producing plain text (and not HTML) we want a different
default escaping mechanism.  This can be specified in the template as
follows:
    <pre class="template"><&| /org/jamon/escape/Html &><%LITERAL>
<%escape #n>
<%args>
  int count;
  String name = "Somebody";
  String greeting;
</%args>
    Many Greetings
    ==============
    <%for int i = 1; i <= count; ++i %>
      <% i %>. <% greeting %> <% name %>
    </%for>
</%LITERAL></&></pre>
It would emit
    <pre class="tty">
    Many Greetings
    ==============
    1. Hello Duke &amp; Co.
    2. Hello Duke &amp; Co.
    3. Hello Duke &amp; Co.
</pre>

The available escaping mechanisms are:
<ul>
  <li><code>Escaping.NONE</code> (#n)
  <li><code>Escaping.HTML</code> (#h)
  <li><code>Escaping.STRICT_HTML</code> (#H)
  <li><code>Escaping.URL</code> (#u)
  <li><code>Escaping.XML</code> (#x)
</ul>

See the <a href="Reference.html">template reference manual</a> for
further details.
