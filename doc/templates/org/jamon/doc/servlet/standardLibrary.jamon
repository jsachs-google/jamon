<span class="concept">Using input elements</span>

To aid in the generation and parsing of forms, it helps to have a library of input objects and
corresponding templates.  For example, for text inputs, there could be an
<code>html.TextInputField</code> class:

<& ../_JavaInclude: "/sample/standardLibrary/src/html/TextInputField" &>

and corresponding template <code>/html/TextInput.jamon</code> to generate text inputs:

<& ../_TemplateInclude: "/sample/standardLibrary/templates/html/TextInput" &>

Since it is the controller that will be receiving and parsing the data from
the form it is natural that it decide what the name of each CGI parameter
should be as well as the default value the input element should display.  Hence
it is natural to pass input objects like the one above into the template that
renders the view.  Furthermore since parsing the data that comes back also
needs access to the names of the parameters it natural to place all this in
one class.  This is a <code>FormFields</code> class.
<p>
For example, here is a FormFields class suitable for use in our "Hello World"
application (you can also download a
<a href="example2/foobar.zip">zipfile</a> with all the
sources from this section, or a <a href="example2/foobar.war">WAR file</a>
ready for deployment):

  <& ../_JavaInclude: "/sample/standardLibrary/src/HelloFormFields" &>

Here is a servlet that will use the above class:

  <& ../_JavaInclude: "/sample/standardLibrary/src/HelloServlet" &>

and the corresponding template should look like:

  <& ../_TemplateInclude: "/sample/standardLibrary/templates/HelloTemplate" &>

There are a few things to note about the above example.
<ul>
  <li><code>HelloFormFields</code> produces
    <code class="code">html.TextInput</code>
    objects which are rendered as HTML input elements by the
    <code class="template">/html/TextInput</code>
    template</li>
  <li>If the user makes an error while entering their data (for example,
by typing "13q") then they will be presented with an error message together
with the data they entered, so they can edit it (in this case they could just
delete the "q" and resubmit).</li>
</ul>

<p>

If you are interested in improving the above, here are some exercises:
<ol>
  <li>Make the error messages more fine-grained (for example, indicate
    when a number is negative)</li>
  <li>Indicate what the maximum allowable number is (the challenge is to find the
    "right" place to put the data)</li>
  <li>In the example above the same template was used to both gather user input
    and display the result.
    It is probably better to have two different templates, one dedicated to
    each task.</li>
</ol>
