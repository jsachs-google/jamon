<%doc>
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
</%doc>
<%extends _Base>
<%class>
  @Override protected Section currentSection() { return Section.DOC_MAVEN; }
</%class>
<%override title>Using Jamon with Maven</%override>

<h3>Overview</h3>

<p>
  Within a Java program, each Jamon template is represented as an
  instance of a class specific to that template. In order for your
  program to compile, Jamon templates need to be translated into
  Java source classes, and those generated Java sources need to be
  included in the build of your project.  This is accomplished by the
  <a href="http://maven.jamon.org/projects/jamon-maven-plugin/<& _Version: "jamon-maven-plugin" &>/">Jamon
  Maven Plugin</a>.
</p>

<h4>Assumptions</h4>
<ul>
  <li>Jamon templates are located in the directory
  tree named '<code>./src/templates</code>'
  <li>Java source files corresponding to Jamon
  templates will be generated into the directory
  '<code>./target/generated-sources</code>'.
</ul>

<h3>Building with Maven</h3>

<p>
  Jamon releases are mirrored on the primary Maven repository sites
  (<code>http://repo1.maven.org/</code>). All Jamon artifacts (aside from
  Eclipse plugins) should be available there.
</p>
<p>
  Generally, there are three sections of your pom.xml that will need
  to be configured.
</p>

<h4>1. Compile and runtime dependency</h4>
<pre class="ant"><&| /org/jamon/escape/Html &>
  <dependencies>
    <dependency>
      <groupId>org.jamon</groupId>
      <artifactId>jamon-runtime</artifactId>
      <version><& _Version: "jamon-runtime" &></version>
    </dependency>
  </dependencies>
</&></pre>

<h4>2. Hook into project build lifecycle</h4>

<pre class="ant"><&| /org/jamon/escape/Html &>
<build>
    <plugins>
        ...
      <plugin>
        <groupId>org.jamon</groupId>
        <artifactId>jamon-maven-plugin</artifactId>
        <version><& _Version: "jamon-maven-plugin" &></version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>translate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
        ...
    </plugins>
</build>
</&></pre>

<h4>3. (Optional) Hook into Eclipse</h4>

<p>
If you are using <a href="http://www.eclipse.org/m2e/">m2eclipse</a>,
simply install the <a href="Eclipse.html">Jamon Maven Configurator</a>, and eclipse will
automatically configure itself to be Jamon-aware based on the contents
of your pom.xml.
</p>
<p>If you are not using m2eclipse, the solution is far less optimal.
Add the following to the <code>plugins</code> section, ensuring
the templateSourceDir and templateOutputDir match your project:

<pre class="ant"><&| /org/jamon/escape/Html &>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-eclipse-plugin</artifactId>
    <configuration>
      <additionalProjectnatures>
        <projectnature>org.jamon.project.jamonnature</projectnature>
      </additionalProjectnatures>
      <buildcommands>
        <buildcommand>org.jamon.project.templateBuilder</buildcommand>
        <buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
        <buildcommand>org.jamon.project.markerUpdater</buildcommand>
      </buildcommands>
      <additionalConfig>
         <file>
             <name>.settings/org.jamon.prefs</name>
             <content># now
eclipse.preferences.version=1
templateSourceDir=templates
templateOutputDir=tsrc
</content>
        </file>
      </additionalConfig>
    </configuration>
  </plugin>
</&></pre>

<h3>Customizing the plugin</h3>

You can change the location where the plugin looks for template
sources and the locaiton where it generates Java files by
specifying the properties for <code>jamon.template.src</code>
and <code>jamon.template.output</code> in each <code>execution</code>
section above. For example, to root your template sources at
<code>src/main/jamon</code> and generate Java sources into
<code>src/gen</code>, your execution section would look like:

<pre class="ant"><&| /org/jamon/escape/Html &>
<build>
    <plugins>
        ...
      <plugin>
        <groupId>org.jamon</groupId>
        <artifactId>jamon-maven-plugin</artifactId>
        <version><& _Version: "jamon-maven-plugin" &></version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>translate</goal>
            </goals>
            <configuration>
               <templateSourceDir>src/main/jamon</templateSourceDir>
               <templateOutputDir>src/gen</templateOutputDir>
            </configuration>
          </execution>
        </executions>
      </plugin>
        ...
    </plugins>
</build>
</&></pre>
