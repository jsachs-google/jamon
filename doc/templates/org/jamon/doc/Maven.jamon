<%extends _Base>
<%class>
  protected Section currentSection() { return Section.DOC_MAVEN; }
</%class>
<%def _version>2.3.0</%def>
<%override title>Using Jamon with Maven</%override>

<h3>Overview</h3>

<p>
  Within a Java program, each Jamon template is represented as an
  instance of a class specific to that template. In order for your
  program to compile, Jamon templates need to be translated into
  Java source classes, and those generated Java sources need to be
  included in the build of your project.
</p>

<h4>Assumptions</h4>
<ul>
  <li>Jamon templates are located in the directory
  tree named '<code>./src/templates</code>'
  <li>Java source files corresponding to Jamon
  templates will be generated into the directory
  '<code>./tsrc</code>'.
</ul>

<h3>Building with Maven</h3>

The Jamon primary repository is at <code>http://maven.jamon.org/</code>.
All Jamon artifacts (aside from Eclipse plugins) are deployed there. 

Generally, there are three sections of your pom.xml that will need
to be configured.

<h4>1. Plugin repository</h4>

<pre class="ant"><&| /org/jamon/escape/Html &>
<pluginRepositories>
    ...
    <pluginRepository>
        <id>jamon plugin</id>
        <name>jamon plugin</name>
        <url>http://maven.jamon.org/</url>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </pluginRepository>
    ...
</pluginRepositories>
</&></pre>

<h4>2. General dependency repository</h4>

<pre class="ant"><&| /org/jamon/escape/Html &>
  <repositories>
    ...
    <repository>
      <id>jamon</id>
      <name>jamon primary repository</name>
      <layout>default</layout>
      <url>http://maven.jamon.org</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    ...
  </repositories>
</&></pre>

<h4>3. Compile and runtime dependency</h4>
<pre class="ant"><&| /org/jamon/escape/Html &>
<dependencies>
  <dependency>
    <dependency>
      <group>org.jamon</group>
      <artifactId>jamon-runtime</artifactId>
      <version>2.3.0</version>
    </dependency>
  </dependency>
</dependencies>
</&></pre>

<h4>4. Hook into project build lifecycle</h4>

<pre class="ant"><&| /org/jamon/escape/Html &>
<build>
    <plugins>
        ...
      <plugin>
        <groupId>org.jamon</groupId>
        <artifactId>jamon-maven-plugin</artifactId>
        <version><& _version &></version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>translate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
        ...
    </plugins>
</build>
</&></pre>

<h4>5. (Optional) Hook into Eclipse</h4>

Yes, this is far from optimal.

Add the following to the <code>plugins</code> section, ensuring
the templateSourceDir and templateOutputDir match your project:

<pre class="ant"><&| /org/jamon/escape/Html &>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-eclipse-plugin</artifactId>
    <configuration>
      <additionalProjectnatures>
        <projectnature>org.jamon.project.jamonnature</projectnature>
      </additionalProjectnatures>
      <buildcommands>
        <buildcommand>org.jamon.project.templateBuilder</buildcommand>
        <buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
        <buildcommand>org.jamon.project.markerUpdater</buildcommand>
      </buildcommands>
      <additionalConfig>
       	<file>
       			<name>.settings/org.jamon.prefs</name>
       			<content># now 
eclipse.preferences.version=1
templateSourceDir=templates
templateOutputDir=tsrc
</content>
        </file>
      </additionalConfig>
    </configuration>
  </plugin>
</&></pre>

<h3>Customizing the plugin</h3>

You can change the location where the plugin looks for template
sources and the locaiton where it generates Java files by
specifying the properties for <code>jamon.template.src</code>
and <code>jamon.template.output</code> in each <code>execution</code>
section above. For example, to root your template sources at
<code>src/main/jamon</code> and generate Java sources into
<code>src/gen</code>, your execution section would look like:

<pre class="ant"><&| /org/jamon/escape/Html &>
<build>
    <plugins>
        ...
      <plugin>
        <groupId>org.jamon</groupId>
        <artifactId>jamon-maven-plugin</artifactId>
        <version><& _version &></version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>translate</goal>
            </goals>
            <configuration>
               <templateSourceDir>src/main/jamon</templateSourceDir>
               <templateOutputDir>src/gen</templateOutputDir>
            </configuration>
          </execution>
        </executions>
      </plugin>
        ...
    </plugins>
</build>
</&></pre>

