<%extends _TutorialSampleBase>
<%class>
  protected int tutorialStage() { return 2; }
</%class>

<%override tutorialName>Dynamic Content</%override>

Without the ability to compute text to display, Jamon would have no more capability than HTML. Fortunately, Jamon has an expressive structure to specify what gets returned to the user.
<p>
Jamon allows the inclusion of any Java code in the template. Through
the use of the following tags, Java can be used process data or to
generate text to return from the template.

<p>
<%LITERAL>
<table>
  <tr>
    <th>Tag</th>
    <th>Action</th></tr>
  <tr>
    <td><pre>% [Java code]</pre></td>
    <td>Everything after the <code>%</code> to the end of the line is treated as Java code</td>
  </tr>
  <tr>
    <td><pre>&lt;%java> ... &lt;/%java> </pre></td>
    <td>Everything between <code>&lt;%java> ... &lt;/%java></code> is treated as Java code</td>
  </tr>
  <tr>
    <td><pre>&lt;% [java expression] %&gt;</pre></td>
    <td>The Java code between the <code>&lt;%</code> and <code>%&gt;</code> is executed and the
        result is converted to a string and included inline with the text
        generated by the template. Note that there <strong>must</strong>
        be a space between <code>&lt;%</code> and start of the Java code.</td>
  </tr>
</table>
</%LITERAL>
<p>

For small amounts of Java code, using <code>%</code> escaping is useful.
      <&| ../_Template &>
<%LITERAL>
% String dayOfWeek = new java.text.SimpleDateFormat("EEEE").format(new java.util.Date());
</%LITERAL>
</&>

<p>
For larger chunks of Java code, using <code>&lt;%java></code> ...
<code>&lt;/%java></code> tags may be preferable:

      <&| ../_Template &>
<%LITERAL>
<%java>
  String[] forecasts = new String[] {
    "partly cloudy", "mostly cloudy", "sunny", "rain", "snow" };
  int whichForecast = (int) (Math.random() * 5);
  String forecast = forecasts[whichForecast];
</%java>
</%LITERAL>
</&>
<p>

In order to include data computed by Java in the text returned by the
template, you must use the <em>emit</em> operator. This is the
<code>&lt;%</code> ... <code>%></code> tag. :

      <&| ../_Template &>
<%LITERAL>
Welcome to the free weather site.
The weather for <% dayOfWeek %> is <% forecast %>.
To get a better forecast, please sign up for our premium service.
</%LITERAL>
</&>

Jamon also has the following tags to help with flow control; they
behave analogously to their java counterparts.

<%def it><%frag f/><span class="variable"><& f &></span></%def>
<p>
<table>
  <tr>
    <td><pre>&lt;%while <&| it &>conditional</&>>...&lt;/%while></pre></td>
  </tr>
  <tr>
    <td><pre>&lt;%for <&| it &>init</&>; <&| it &>conditional</&>; <&| it &>update</&> %>...&lt;/%for></pre></td>
  </tr>
  <tr>
    <td><pre>&lt;%for <&| it &>Type</&> <&| it &>variable</&>: <&| it &>iterable</&>>...&lt;/%for></pre></td>
  </tr>
  <tr>
    <td><pre>&lt;%if <&| it &>condition1</&> %>..&lt;%elseif <&| it &>condition2</&> %>...&lt;%else>....&lt;/%if></pre></td>
  </tr>
</table>
<p>

For example:
      <&| ../_Template &>
<%LITERAL>
<%if forecast.equals("sunny") %>Go to the beach!<%else>Stay home and read a book!</%if>
Our premium service can forecast
<%for int i = 1; i < 5; i++ %><% i %>, </%for>5 and 6 days ahead.  Check it out!

Note: Around here, the weather is always one of:
<%for String possibility : forecasts %>  <% possibility %>
</%for>
</%LITERAL>
</&>


<h3> Creating a template with dynamic content. </h3>
<p>
<ol>
<li>
Putting this all together in a Jamon template produces
 <a href="TimeAndTempTemplate.jamon" class="file">TimeAndTempTemplate.jamon</a>:
<& ../_TemplateInclude: "/sample/tutorial/templates/TimeAndTempTemplate" &>

<li> To call the template, create a java class such as:
<a class="file" href="TimeAndTempTut2.java">TimeAndTempTut2.java</a>:
<& ../_JavaInclude: "/sample/tutorial/src/TimeAndTempTut2" &>

<li>
Set your classpath:
<table>
  <tr>
    <td class="system">Windows</td>
   <td class="tty">C:\JAMONTMP&gt; SET CLASSPATH=.;\path\to\jamon.jar</td>
  </tr>
  <tr>
    <td class="system">Unix (sh, bash, zsh, ksh)</td>
    <td class="tty">$ export CLASSPATH=.:/path/to/jamon.jar</td>
  </tr>
  <tr>
    <td class="system">Unix (csh, tcsh)</td>
    <td class="tty">% setenv CLASSPATH .:/path/to/jamon.jar</td>
  </tr>
</table>

<li>
Process the template:
<pre class="tty">java org.jamon.TemplateProcessor --destDir=. TimeAndTemplateTemplate</pre>

<li>
Compile everything:
<pre class="tty">javac TimeAndTempTut2.java TimeAndTempTemplate*.java</pre>

<li>
Run it:
<pre class="tty">java TimeAndTempTut2</pre>

<li>
You should see:
<& ../_RunJava; className => "TimeAndTempTut2" &>

</ol>

<p>
