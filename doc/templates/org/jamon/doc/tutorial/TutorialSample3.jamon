<%extends _TutorialSampleBase>
<%class>
  protected int tutorialStage() { return 3; }
</%class>

<%override tutorialName>Template Arguments</%override>

Templates do not exist in a vacuum; templates exist in order to
display information. In a model-view-controller architecture, that
information comes from the model and is passed to the templates to
 as arguments.

<p>

Arguments to a Jamon template are declared between
<nobr><code>&lt;%args></code> ... <code>&lt;%/args></code></nobr> tags:

      <&| ../_Template &>
<%LITERAL>
<%args>
  String         title = "Account Summary";
  java.util.Date effectiveDate;
  String         userName;
  java.math.BigDecimal totalBalance;
  String         alertMessage = "";
</%args>
</%LITERAL>
</&>

The above Jamon code declares a template with three required and two
optional arguments.  The required arguments are:
<ol>
  <li><code>java.util.Date effectiveDate</code></li>
  <li><code>String userName</code></li>
  <li><code>java.math.BigDecimal totalBalance</code></li>
</ol>

Any Java class that invokes this template <strong>must</strong> provide
these three arguments, and they must be provided to the <code>render</code>
method in the order specified in the
<nobr><code>&lt;%args></code> ... <code>&lt;%/args></code></nobr> tag.

<p>
  In addition, there are two optional arguments.  Any java class that
  invokes this class may provide values to override the default values
  via the set methods:
  <ul>
    <li><code>setTitle(String title)</code></li>
    <li><code>setAlertMessage(String alertMessage)</code></li>
  </ul>
</p>

The above setter methods return the template, allowing multiple calls
to be <em>chained</em> together.  Thus, to the sample template
shown above could be invoked with the following code:

<pre class="java">
    sampleTemplate
        .setTitle("Most Recent Account Balance");
        .render(new OutputStreamWriter(System.out),
                new Date(), "John Public", new BigDecimal("9.99"));
</pre>

In the above example, the calling code sets the optional argument
<code>title</code>, does not change the default value for the optional
argument <code>alertMessage</code>, and then calls the render method
with the required <code>Writer</code> and the three required arguments.
<p>
<div class="note">Note that the <code>render</code>
method must be called <em>after</em> after the setter methods for the
optional arguments.</div>

Note that all arguments, both required and optional, are translated
into Java as <code>final</code> variables.  Thus, the following Jamon
code would <em>not</em> work:

<&| ../_Template &><%LITERAL>
<%args>
  String message;
  boolean isError;
</%args>
% if (isError) { message = "There was an error"; } // WILL NOT WORK
<% message %>
</%LITERAL></&>

<%doc>
<div class="note">Note: all arguments, both required and optional, are
translated into Java as <code>final</code> variables. Thus, any Java
code embedded in the Jamon template <strong>can not</strong> reassign
values to the template arguments.</div>
</%doc>

<h3> Putting it all together</h3>
<ol>
<li>
Create a Jamon template
 <& _FileLink: "AccountSummaryTemplate.jamon" &>:
<& ../_TemplateInclude: "/sample/tutorial/templates/AccountSummaryTemplate" &>


<li> Write a java class to call the template:
<& _FileLink: "AccountSummaryTut3.java" &>:
<& ../_JavaInclude: "/sample/tutorial/src/AccountSummaryTut3" &>

<li> Set the classpath, process the template, compile, and run the program:
<pre class="tty">
    export CLASSPATH=.:/path/to/jamon.jar
    java org.jamon.TemplateProcessor --destDir=. AccountSummaryTemplate
    javac AccountSummaryTut3.java AccountSummaryTemplate*.java
    java AccountSummaryTut3
</pre>

<li> You should see:
<& ../_RunJava; className = "AccountSummaryTut3" &>

</ol>

<p>
