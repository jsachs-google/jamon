<%doc>
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
</%doc>
<%extends _TutorialSampleBase>
<%class>
  @Override protected int tutorialStage() { return 10; }
</%class>

<%override tutorialName>Template Inheritance: Overriding Inherited Methods/Subtemplates</%override>

As explained in the section on
<& _FileLink: "TutorialSample7.html"&>, a subtemplate can
either be <em>private</em> or <em>protected</em>. Subtemplates defined
with the <code>&lt;%def <var>subTempName</var>></code> ... <code>&lt;/%def></code> tag are
<em>private</em> and can be accessed <strong>only</strong> within the
template that defined the subtemplate.
<p>

Subtemplates defined with the
<code>&lt;%method <var>subTempName</var>></code> ... <code>&lt;/%method></code>
tag, however, are <em>protected</em> and can be accessed by templates
that inherit from the template with the subtemplate definition.
To invoke a protected subtemplate defined in a parent, a child template
simply invokes it like any other subtemplate
<pre class="template"><%LITERAL><& <var>subTempName</var> &></%LITERAL></pre>
Usually, however, it is the parent template that invokes the subtemplate,
and the parent makes the template protected so that the child can
override it. For example, the template
<& _FileLink: "InheritanceParentProtected.jamon" &> declares a <code>title</code> subtemplate
for the expressed purpose of allowing the child template to
override the subtemplate in order to replace the title.

<& ../_TemplateInclude: "/sample/tutorial/templates/InheritanceParentProtected" &>

<p>
The template that derives this template would override the <code>title</code>
subtemplate by using the <code>&lt;%override tutorialName></code> ... <code>&lt;/%override></code> tag.

<pre class="template"><%LITERAL>
<%override tutorialName>
  <%xargs>
    name;
  &lt;/%xargs>
  Jamon Specials for <% name %>
&lt;/%override>
</%LITERAL></pre>

Overridden methods take the same arguments as the method they
override, although, as with template inheritance, only those
arguments declared in an <code>&lt;%xargs&gt;</code>
... <code>&lt;/%xargs&gt;</code> block will be visible within
the body of the override. Also, as with template inheritance,
only the names of the arguments are listed within the
<code>&lt;%xargs></code> ... <code>&lt;/%xargs></code> tag,
because the types of the arguments are declared in the parent template's
definition.
<p>
The template <& _FileLink: "InheritanceChildProtected.jamon" &>, below, extends
<& _FileLink: "InheritanceParentProtected.jamon" &> and overrides the subtemplate
<code>title</code>. By overriding the <code>title</code> method
<code>InheritanceChildProtected</code> replaces the title that the
parent template generates.

<& ../_TemplateInclude: "/sample/tutorial/templates/InheritanceChildProtected" &>

<p>The class <& _FileLink: "User2.java" &> takes advantage of the fact that the
<code>InheritanceParentProtected</code> supports inheritance by
delegating the choice of which derived template to invoke to a
separate method and then simply calling the <code>render()</code>
method on the object returned. The top level controller simply has
to provide the output <code>Writer</code> and the
arguments required by the parent template,
<code>InheritanceParentProtected</code>, while the delegated method
selects the actual template instance and provides the arguments
required by that instance.

<& ../_JavaInclude: "/sample/tutorial/src/User2" &>

The result of executing this class and template is below.

<& ../_RunJava; className = "User2" &>
