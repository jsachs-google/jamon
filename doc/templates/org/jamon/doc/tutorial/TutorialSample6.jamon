<%doc>
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
</%doc>
<%extends _TutorialSampleBase>
<%class>
  @Override protected int tutorialStage() { return 6; }
</%class>

<%override tutorialName>Calling Another Template From a Template</%override>

Jamon templates can call other templates. The semantics are exactly
the same as a method call in Java. The only difference is the syntax.
<p> In Jamon, a template calls another template with the
<nobr><code>&lt;& templateName ; arguments &></code></nobr>
tag. (Notice that the tag delimeters are <nobr><code>&lt;&</code> and
<code>&></code></nobr> -- <em>not</em> <nobr><code>&lt;%</code></nobr> and
<code>%></code>.) Some examples of calling templates from a template
are shown below.

      <&| ../_Template &><%LITERAL>
  <%import>
    java.util.Date;
  </%import>

  <& header &>
  <& /org/foo/weather/ForecastTemplate; time = new Date();
     message = "Thank you for using our wearther service!" &>
  <& /com/tripleclick/ads/Advertisement &>
  <& footer &></%LITERAL></&>

This template calls the <code>header</code> and <code>footer</code>
templates from the same package (directory) as this template. It also
calls the <code>ForcastTemplate</code> in the
<code>org.foo.weather</code> package and the
<code>Advertisement</code> template in the
<code>com.tripleclick.ads</code> package. The call to the
<code>ForecastTemplate</code> provides arguments to the call. These
arguments may be required or they may be optional; there is no
difference in how required and optional argument values are provided
by the caller in Jamon.

<p> Arguments to template calls are assigned by name. The name of the
argument is the name specified in the <nobr><code>&lt;%args&gt;</code>
... <code>&lt;/%args&gt;</code></nobr> tag of the called template. The
name should be followed by <code>=&gt;</code> and then the value of
the argument. The value is evaluated as Java code, so it may be any
Java expression.  Multiple arguments should be separated by semicolons.

<h3>An Example</h3>

    The template below, <& _FileLink: "JamonCallerTemplate.jamon" &>, outputs several rows
    of names and telephone numbers.
    <& ../_TemplateInclude: "/sample/tutorial/templates/JamonCallerTemplate" &>

    It calls the template <& _FileLink: "StdPhoneNumberFormat.jamon" &> (below)
    to format the telephone number into a specified format.
    The <code>separator</code> argument to the
    <code>StdPhoneNumberFormat</code> template is
    optional, so the <code>JamonCallerTemplate</code> only has to provide
    a value to override the default.

    <& ../_TemplateInclude: "/sample/tutorial/templates/StdPhoneNumberFormat" &>

<div class="note">Notice that the <code>StdPhoneNumberFormat</code>
template adds backslashes, '\', at the end of each line that outputs
text (the non-java code lines). The backslash at the end of the line
escapes the new-line on that line. Jamon outputs text exactly as it
appears in the template, including new-lines. To prevent new-lines
from being output, each Jamon line must end with a backslash.
</div>

    The top level template, <code>JamonCallerTemplate</code> is called
    from the Java class
     <& _FileLink: "JamonCallerTut6.java" &>:
    <& ../_JavaInclude: "/sample/tutorial/src/JamonCallerTut6" &>
<li> To process and run the template, execute the following commands:
<pre class="tty">
    export CLASSPATH=.:/path/to/jamon-runtime.jar:/path/to/jamon-api.jar:/path/to/jamon-processor.jar
    java org.jamon.TemplateProcessor --destDir=. JamonCallerTemplate StdPhoneNumberFormat
    javac JamonCallerTut6.java JamonCallerTemplate*.java StdPhoneNumberFormat*.java
    java JamonCallerTut6
</pre>

<li> You should see:
<& ../_RunJava; className = "JamonCallerTut6" &>
