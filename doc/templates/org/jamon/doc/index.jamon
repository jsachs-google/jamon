<%extends _Base>
<%override title>Jamon</%override>

<%class>
  @Override protected Section currentSection() { return Section.HOME; }
</%class>

<h2><span /></h2>

<b>Jamon</b> is a text template engine for <a
href="http://java.sun.com">Java</a>, useful for generating dynamic <a
href="http://www.w3.org/MarkUp">HTML</a>, <a
href="http://www.w3.org/XML">XML</a>, or any text-based content. In a
typical <a
href="http://ootips.org/mvc-pattern.html">Model-View-Controller
architecture</a>, Jamon clearly is aimed at the View (or presentation)
layer.

<p> Because it is compiled to non-reflective Java code, and statically
  type-checked, Jamon is <b>ideally suited to support <a
  href="http://www.refactoring.com">refactoring</a></b> of
  template-based UI applications. Using <a
  href="http://www.mockobjects.com">mock objects</a> -like
  functionality, Jamon also facilitates unit testing of the controller
  and view. See the <a href="Features.html">list of features</a> for
  more detail.  </p>

<p>
The motivations for Jamon came from dissatisfaction with current
presentation layer technologies such as <a
href="http://java.sun.com/products/jsp/">JSP</a> and
<a href="http://jakarta.apache.org/velocity/">Velocity</a>. Ideas
were also drawn from a surprisingly pleasant experience with
<a href="http://www.masonhq.com">Mason</a>, which though written in
and for <a href="http://www.perl.org">Perl</a>, provided inspiration
both conceptual and syntactic (for better or worse).
</p>
