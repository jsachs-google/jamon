<?xml version="1.0"?>

<project name="Jamon documentation" default="build">

  <description>----------------------------------------------------------------
Documentation for the Jamon project.  Jamon itself is used to build
the documentation thus taking care of issues such as escaping.
-----------------------------------------------------------------</description>

  <property file="build.properties"/>
  <property file="../build.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="build.dir" value="build"/>
  <property name="work.dir" value="${build.dir}/work"/>
  <property name="www.dir" value="${build.dir}/www"/>
  <property name="doc.dir" value="${build.dir}/www"/>
  <property name="classes.dir" value="${www.dir}/classes"/>
  <property name="java.lib.jamon" location="../jamon.jar"/>
  <property name="java.lib.diff" value="/usr/local/share/java/diff.jar"/>
  <property name="invoker.class" value="org.jamon.InvokerTool" />

  <property name="web.inf.dir" value="./WEB-INF"/>
  <property name="build.classes.dir" value="${web.inf.dir}/classes"/>
  <property name="src.dir" value="src"/>

  <property name="tomcat.home" value="env.TOMCAT_HOME"/>
  <property name="tomcat.common.lib" value="${tomcat.home}/common/lib"/>

  <property name="com.sun.tools.jar" value="${java.home}/../lib/tools.jar"/>

  <property file="../core/src/org/jamon/Resources.properties" />
  <property name="tarfilebase" value="jamon-${org.jamon.version}" />
  <property name="tarball.src" value="${tarfilebase}-src.tgz" />
  <property name="tarball.bin" value="${tarfilebase}.tgz" />
  <property name="zip.src" value="${tarfilebase}-src.zip" />
  <property name="zip.bin" value="${tarfilebase}.zip" />

  <fileset id="build-files" dir="${build.dir}"/>
  <fileset id="servlet-build-files" dir="${build.classes.dir}"/>

  <target name="init">
    <mkdir dir="${doc.dir}"/>
    <mkdir dir="${build.dir}"/>
    <copy file="base.css" todir="${doc.dir}" />
    <copy file="earthaddress.gif" todir="${doc.dir}" />
    <copy file="favicon.ico" todir="${doc.dir}" />
    <copy file="robots.txt" todir="${doc.dir}" />
    <taskdef name="invoker"
             classname="org.jamon.ant.InvokerTask"
             classpath="${java.lib.jamon}" />
    <taskdef name="jamon"
             classname="org.jamon.ant.JamonTask"
             classpath="${java.lib.jamon}" />
    <dependset>
      <srcfileset file="${java.lib.jamon}"/>
      <targetfileset refid="build-files"/>
    </dependset>
  </target>

  <target name="quickstart" depends="init" >
    <property name="build.sysclasspath" value="last" />
    <copy file="templates/org/jamon/doc/JamonQsJava.jamon"
          tofile="${doc.dir}/JamonQs.java" />
    <copy file="${doc.dir}/JamonQs.java"
          todir="${work.dir}" />
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/QsTemp.jamon"
             template="/org/jamon/doc/QsTemp" />
    <copy file="${doc.dir}/QsTemp.jamon" todir="${work.dir}" />
    <jamon destdir="${work.dir}" srcdir="${work.dir}">
      <include name="QsTemp.jamon"/>
    </jamon>
<!--    <java classname="org.jamon.TemplateProcessor"
          failonerror="true"
          fork="yes"
          dir="${work.dir}"
          classpath="${java.lib.jamon}">
      <arg line="- -destDir=. QsTemp" />
    </java>
-->
    <javac destdir="${work.dir}"
           srcdir="${work.dir}"
           classpath="${java.lib.jamon}"
           includes="JamonQs.java,QsTemp.java,QsTempImpl.java" />
    <tempfile property="temp.file" destdir="${work.dir}"/>
    <java classname="JamonQs"
          failonerror="true"
          classpath="${work.dir}:${java.lib.jamon}"
          output="${temp.file}" >
      <arg line="one two three" />
    </java>
    <zip destfile="${www.dir}/JamonQs.zip"
         basedir="${www.dir}"
         includes="JamonQs.java,QsTemp.jamon" />
    <loadfile property="quickstart.output" srcFile="${temp.file}" />
    <delete file="${temp.file}" />
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/QuickStart.html"
             template="/org/jamon/doc/QuickStart" >
      <arg name="output" value="${quickstart.output}" />
    </invoker>
  </target>

  <target name="tutorial" depends="init" >
    <property name="build.sysclasspath" value="last" />
    <property name="tutorial.path" value="/org/jamon/doc/tutorial" />
    <copy todir="${doc.dir}" >
      <fileset dir="templates${tutorial.path}">
        <include name="**/*Java.jamon"/>
      </fileset>
      <mapper type="glob" from="*Java.jamon" to="*.java" />
    </copy>
    <copy todir="${work.dir}" >
      <fileset dir="${doc.dir}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <jamon destdir="${work.dir}" srcdir="templates">
    </jamon>
    <jamon destdir="${work.dir}" srcdir="sample/tutorial/templates">
    </jamon>
    <javac destdir="${work.dir}"
           classpath="${java.lib.jamon}"
           includes="*.java" >
      <src path="sample/tutorial/src" />
      <src path="${work.dir}" />
    </javac>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="HelloTut1" />
      <param name="page.name" value="TutorialSample1" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="TimeAndTempTut2" />
      <param name="page.name" value="TutorialSample2" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="AccountSummaryTut3" />
      <param name="page.name" value="TutorialSample3" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="EscapingTut4" />
      <param name="page.name" value="TutorialSample4" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="ClassExampleTut5" />
      <param name="page.name" value="TutorialSample5" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="JamonCallerTut6" />
      <param name="page.name" value="TutorialSample6" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="SubtemplateTut7" />
      <param name="page.name" value="TutorialSample7" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="Holiday" />
      <param name="page.name" value="TutorialSample8" />
    </antcall>
    <!-- there are two examples for tutorial 9 -->
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="InheritanceSimpleTut9" />
      <param name="page.name" value="TutorialSample9" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="User" />
      <param name="page.name" value="TutorialSample9" />
    </antcall>
    <antcall target="generateOutput">
      <param name="arg.line" value="" />
      <param name="template.name" value="User2" />
      <param name="page.name" value="TutorialSample10" />
    </antcall>
    <zip destfile="${www.dir}/Tutorial.zip"
         basedir="${www.dir}"
         includes="*.java,*.jamon" />
  </target>

  <target name="generateOutput">
    <tempfile property="temp.file" destdir="${work.dir}"/>
    <java classname="${template.name}"
          failonerror="true"
          classpath="${work.dir}:${java.lib.jamon}"
          output="${temp.file}" >
      <arg line="${arg.line}" />
    </java>
    <loadfile property="template.output" srcFile="${temp.file}" />
    <delete file="${temp.file}" />
    <echo message="${page.name}"/>
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/${page.name}.html"
             template="${tutorial.path}/${page.name}" >
      <arg name="output" value="${template.output}" />
    </invoker>
  </target>

  <target name="doc"
          description="Generates all the documentation"
          depends="init" >
    <dependset>
      <srcfilelist dir="templates/org/jamon/doc" files="_Base" />
      <targetfileset dir="${doc.dir}" includes="*.html" />
    </dependset>
    <dependset>
      <srcfileset dir="templates/org/jamon/doc/servlet" includes="*" />
      <targetfilelist dir="${doc.dir}" files="Servlets.html" />
    </dependset>
    <antcall target="quickstart" />
    <antcall target="tutorial" />
    <antcall target="grind">
      <param name="template" value="BuildingProjects" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="UserGuide" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="GeneratedTemplates" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Reference" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="index" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Overview" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="JamonTask" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="InvokerTask" />
    </antcall>
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/Download.html"
             template="/org/jamon/doc/Download">
      <arg name="binTarball" value="${tarball.bin}" />
      <arg name="srcTarball" value="${tarball.src}" />
      <arg name="binZip" value="${zip.bin}" />
      <arg name="srcZip" value="${zip.src}" />
      <arg name="version" value="${org.jamon.version}" />
    </invoker>
    <antcall target="grind">
      <param name="template" value="Documentation" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Contact" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="About" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="News" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Features" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Servlets" />
    </antcall>
    <!-- Generate the first template example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/templates/foo/bar/HelloTemplate.jamon"
             template="/org/jamon/doc/servlet/hello" />
    <!-- Generate the first servlet example -->
    <property name="servlet.src.dir" value="${www.dir}/src/foo/bar" />
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src.dir}/HelloServlet.java"
             template="/org/jamon/doc/servlet/HelloServletTemplate" />
    <!-- Generate the ant script -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/build.xml"
             template="/org/jamon/doc/servlet/buildxml" />
    <!-- Generate the deployment descriptor -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/web.xml"
             template="/org/jamon/doc/servlet/webxml" />
    <!-- Now do the second example -->
    <!-- Generate the second servlet example -->
    <property name="servlet.src2.dir" value="${www.dir}/example2/src/foo/bar" />
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src2.dir}/HelloServlet.java"
             template="/org/jamon/doc/servlet/HelloServlet2Template" />
    <!-- Generate the form fields class for the second example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src2.dir}/HelloFormFields.java"
             template="/org/jamon/doc/servlet/FormFieldsTemplate" />
    <!-- Generate the second template example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/example2/templates/foo/bar/HelloTemplate"
             template="/org/jamon/doc/servlet/Hello2TemplateTemplate" />
    <!-- To get a web.xml and build.xml for the example we just copy
         them from the first example -->
    <copy file="${www.dir}/web.xml" todir="${www.dir}/example2" />
    <copy file="${www.dir}/build.xml" todir="${www.dir}/example2" />
    <!-- Copy the various files needed for Appendix A -->
    <copy todir="${www.dir}">
      <fileset dir="resources">
        <include name="server.xml"/>
        <include name="tomcat-users.xml"/>
        <include name="catalina.policy"/>
        <include name="default-web.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="checkgrind">
    <echo>Checking templates/org/jamon/doc/${template}</echo>
    <uptodate property="grindnotneeded"
              srcfile="templates/org/jamon/doc/${template}.jamon"
              targetfile="${doc.dir}/${template}.html" />
  </target>

  <target name="grind" depends="checkgrind" unless="grindnotneeded">
    <echo>Generating ${doc.dir}/${template}.html</echo>
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/${template}.html"
             template="/org/jamon/doc/${template}" />
  </target>

  <target name="war"
          depends="doc">
    <ant dir="${www.dir}" />
    <ant dir="${www.dir}/example2" />
  </target>

  <target name="zip"
          depends="doc">
    <zip destfile="${www.dir}/foobar.zip"
         basedir="${www.dir}"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
    <zip destfile="${www.dir}/example2/foobar.zip"
         basedir="${www.dir}/example2"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
  </target>

  <target name="build"
          depends="war,zip">
    <ant dir="${www.dir}" target="clean" />
  </target>

  <target name="cvsignores">
    <echo file=".cvsignore">.cvsignore ${build.dir} build.properties
</echo>
  </target>

  <target name="clean">
    <delete>
      <fileset refid="build-files"/>
      <fileset refid="servlet-build-files"/>
    </delete>
  </target>

  <target name="spotless" depends="clean">
    <delete file=".cvsignore"/>
  </target>

  <target name="compile"
          description="Compile the servlet">
    <dependset>
      <srcfileset file="${java.lib.jamon}"/>
      <targetfileset refid="servlet-build-files"/>
    </dependset>
    <mkdir dir="${build.classes.dir}"/>
    <javac destdir="${build.classes.dir}"
           debug="true"
           deprecation="true"
           classpath="${java.lib.jamon}:${tomcat.common.lib}/servlet.jar"
           srcdir="${src.dir}"
           failonerror="true"/>
  </target>

  <target name="servlet" depends="init,compile" description="Run the servlet">
    <mkdir dir="${work.dir}" />
    <java classname="org.apache.catalina.startup.Catalina"
          failonerror="true"
          fork="yes"
          dir=".">
      <classpath>
        <pathelement location="${java.lib.jamon}"/>
        <pathelement location="${java.lib.diff}"/>
        <pathelement location="${tomcat.home}/server/lib/servlets-default.jar"/>
        <pathelement location="${com.sun.tools.jar}"/>
        <fileset dir="${tomcat.common.lib}" includes="*.jar" />
        <fileset dir="${tomcat.home}/server/lib" includes="*.jar" />
        <fileset dir="${tomcat.home}/bin" includes="*.jar" />
      </classpath>
      <sysproperty key="catalina.home" value="."/>
      <arg line="-config server.xml start" />
    </java>
  </target>

</project>
