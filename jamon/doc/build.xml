<?xml version="1.0"?>

<project name="Jamon documentation" default="build">

  <description>----------------------------------------------------------------
Documentation for the Jamon project.  Jamon itself is used to build
the documentation thus taking care of issues such as escaping.
-----------------------------------------------------------------</description>

  <property file="build.properties"/>
  <property file="../build.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="build.dir" value="build"/>
  <property name="work.dir" value="${build.dir}/work"/>
  <property name="www.dir" value="${build.dir}/www"/>
  <property name="doc.dir" value="${build.dir}/www"/>
  <property name="classes.dir" value="${www.dir}/classes"/>
  <property name="java.lib.jamon" location="../jamon.jar"/>
  <property name="java.lib.diff" value="/usr/local/share/java/diff.jar"/>
  <property name="invoker.class" value="org.jamon.InvokerTool" />

  <property file="../core/src/org/jamon/Resources.properties" />
  <property name="tarfilebase"
            value="jamon-${org.jamon.version.major}.${org.jamon.version.minor}" />
  <property name="tarball.src" value="${tarfilebase}-src.tgz" />
  <property name="tarball.bin" value="${tarfilebase}.tgz" />
  <property name="zip.src" value="${tarfilebase}-src.zip" />
  <property name="zip.bin" value="${tarfilebase}.zip" />

  <taskdef name="invoker"
           classname="org.jamon.ant.InvokerTask"
           classpath="${java.lib.jamon}" />

  <target name="init">
    <mkdir dir="${doc.dir}"/>
    <copy file="base.css" todir="${doc.dir}" />
  </target>

  <target name="quickstart" depends="init" >
    <property name="build.sysclasspath" value="last" />
    <copy file="templates/org/jamon/doc/JamonQsJava"
          tofile="${doc.dir}/JamonQs.java" />
    <copy file="${doc.dir}/JamonQs.java"
          todir="${work.dir}" />
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/QsTemp"
             template="/org/jamon/doc/QsTemp" />
    <copy file="${doc.dir}/QsTemp" todir="${work.dir}" />
    <java classname="org.jamon.TemplateProcessor"
          failonerror="true"
          fork="yes"
          dir="${work.dir}"
          classpath="${java.lib.jamon}">
      <arg line="--destDir=. --all QsTemp" />
    </java>
    <javac destdir="${work.dir}"
           srcdir="${work.dir}"
           classpath="${java.lib.jamon}"
           includes="JamonQs.java,QsTemp.java,QsTempImpl.java" />
    <tempfile property="temp.file" destdir="${work.dir}"/>
    <java classname="JamonQs"
          failonerror="true"
          classpath="${work.dir}:${java.lib.jamon}"
          output="${temp.file}" >
      <arg line="one two three" />
    </java>
    <loadfile property="quickstart.output" srcFile="${temp.file}" />
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/QuickStart.html"
             template="/org/jamon/doc/QuickStart" >
      <arg name="output" value="${quickstart.output}" />
    </invoker>
  </target>

  <target name="doc"
          description="Generates all the documentation"
          depends="init" >
    <dependset>
      <srcfilelist dir="templates/org/jamon/doc" files="_Base" />
      <targetfileset dir="${doc.dir}" includes="*.html" />
    </dependset>
    <dependset>
      <srcfilelist dir="templates/org/jamon/doc" files="FormFieldsTemplate,_showDiff,buildxml,inputElements,parametersAndInput,prerequisites,standardLibrary,usingTomcat,webxml" />
      <srcfileset dir="templates/org/jamon/doc" includes="servletSnippet*,hello*,Hello*" />
      <targetfilelist dir="${doc.dir}" files="Servlets.html" />
    </dependset>
    <antcall target="quickstart" />
    <antcall target="grind">
      <param name="template" value="BuildingProjects" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="UserGuide" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Reference" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="index" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Overview" />
    </antcall>
    <invoker classpath="${java.lib.jamon}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/Download.html"
             template="/org/jamon/doc/Download">
      <arg name="binTarball" value="${tarball.bin}" />
      <arg name="srcTarball" value="${tarball.src}" />
      <arg name="binZip" value="${zip.bin}" />
      <arg name="srcZip" value="${zip.src}" />
    </invoker>
    <antcall target="grind">
      <param name="template" value="Documentation" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Contact" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="News" />
    </antcall>
    <antcall target="grind">
      <param name="template" value="Servlets" />
    </antcall>
    <!-- Generate the first template example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/templates/foo/bar/HelloTemplate"
             template="/org/jamon/doc/hello" />
    <!-- Generate the first servlet example -->
    <property name="servlet.src.dir" value="${www.dir}/src/foo/bar" />
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src.dir}/HelloServlet.java"
             template="/org/jamon/doc/HelloServletTemplate" />
    <!-- Generate the ant script -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/build.xml"
             template="/org/jamon/doc/buildxml" />
    <!-- Generate the deployment descriptor -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/web.xml"
             template="/org/jamon/doc/webxml" />
    <!-- Now do the second example -->
    <!-- Generate the second servlet example -->
    <property name="servlet.src2.dir" value="${www.dir}/example2/src/foo/bar" />
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src2.dir}/HelloServlet.java"
             template="/org/jamon/doc/HelloServlet2Template" />
    <!-- Generate the form fields class for the second example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${servlet.src2.dir}/HelloFormFields.java"
             template="/org/jamon/doc/FormFieldsTemplate" />
    <!-- Generate the second template example -->
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${www.dir}/example2/templates/foo/bar/HelloTemplate"
             template="/org/jamon/doc/Hello2TemplateTemplate" />
    <!-- To get a web.xml and build.xml for the example we just copy
         them from the first example -->
    <copy file="${www.dir}/web.xml" todir="${www.dir}/example2" />
    <copy file="${www.dir}/build.xml" todir="${www.dir}/example2" />
    <!-- Copy the various files needed for Appendix A -->
    <copy todir="${www.dir}">
      <fileset dir="resources">
        <include name="server.xml"/>
        <include name="tomcat-users.xml"/>
        <include name="catalina.policy"/>
        <include name="default-web.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="checkgrind">
    <echo>Checking templates/org/jamon/doc/${template}</echo>
    <uptodate property="grindnotneeded"
              srcfile="templates/org/jamon/doc/${template}"
              targetfile="${doc.dir}/${template}.html" />
  </target>

  <target name="grind" depends="checkgrind" unless="grindnotneeded">
    <echo>Generating ${doc.dir}/${template}.html</echo>
    <invoker classpath="${java.lib.jamon}:${java.lib.diff}"
             workDir="${work.dir}"
             sourceDir="templates"
             output="${doc.dir}/${template}.html"
             template="/org/jamon/doc/${template}" />
  </target>

  <target name="war"
          depends="doc">
    <ant dir="${www.dir}" />
    <ant dir="${www.dir}/example2" />
  </target>

  <target name="zip"
          depends="doc">
    <zip destfile="${www.dir}/foobar.zip"
         basedir="${www.dir}"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
    <zip destfile="${www.dir}/example2/foobar.zip"
         basedir="${www.dir}/example2"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
  </target>

  <target name="build"
          depends="war,zip">
    <ant dir="${www.dir}" target="clean" />
  </target>

  <target name="cvsignores">
    <echo file=".cvsignore">.cvsignore ${build.dir} build.properties
</echo>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <target name="spotless" depends="clean">
    <delete file=".cvsignore"/>
  </target>

</project>
