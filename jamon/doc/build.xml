<?xml version="1.0"?>

<project name="Jamon dcumentation" default="build">

  <description>----------------------------------------------------------------
Documentation for the Jamon project.  Jamon itself is used to build
the documentation thus taking care of issues such as escaping.
-----------------------------------------------------------------</description>

  <property file="build.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="build.dir" value="build"/>
  <property name="www.dir" value="${build.dir}/www"/>
  <property name="classes.dir" value="${www.dir}/classes"/>
  <property name="java.lib.jamon" location="../jamon.jar"/>
  <property name="java.lib.diff" value="/usr/local/share/java/diff.jar"/>
  <property name="invoker.class" value="org.jamon.InvokerTool" />

  <target name="doc"
          description="Generates all the documentation">
    <mkdir dir="${www.dir}"/>
    <copy file="base.css" todir="${www.dir}" />
    <!-- Generate the big Rainbow document -->
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${www.dir}/rainbow.html" />
      <arg value="/org/jamon/doc/RainbowTemplate" />
    </java>
    <!-- Generate the first template example -->
    <mkdir dir="${www.dir}/templates/foo/bar"/>
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${www.dir}/templates/foo/bar/HelloTemplate" />
      <arg value="/org/jamon/doc/hello" />
    </java>
    <!-- Generate the first servlet example -->
    <property name="servlet.src.dir" value="${www.dir}/src/foo/bar" />
    <mkdir dir="${servlet.src.dir}" />
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${servlet.src.dir}/HelloServlet.java" />
      <arg value="/org/jamon/doc/HelloServletTemplate" />
    </java>
    <!-- Generate the ant script -->
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${www.dir}/build.xml" />
      <arg value="/org/jamon/doc/buildxml" />
    </java>
    <!-- Generate the deployment descriptor -->
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${www.dir}/web.xml" />
      <arg value="/org/jamon/doc/webxml" />
    </java>
    <!-- Now do the second example -->
    <!-- Generate the second servlet example -->
    <property name="servlet.src2.dir" value="${www.dir}/example2/src/foo/bar" />
    <mkdir dir="${servlet.src2.dir}" />
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${servlet.src2.dir}/HelloServlet.java" />
      <arg value="/org/jamon/doc/HelloServlet2Template" />
    </java>
    <!-- Generate the form fields class for the second example -->
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${servlet.src2.dir}/HelloFormFields.java" />
      <arg value="/org/jamon/doc/FormFieldsTemplate" />
    </java>
    <!-- Generate the second template example -->
    <mkdir dir="${www.dir}/example2/templates/foo/bar"/>
    <java classname="${invoker.class}"
          classpath="${java.lib.jamon}:${java.lib.diff}" 
          fork="yes">
      <arg value="-s" />
      <arg value="templates" />
      <arg value="-w" />
      <arg value="build/work" />
      <arg value="-o" />
      <arg value="${www.dir}/example2/templates/foo/bar/HelloTemplate" />
      <arg value="/org/jamon/doc/Hello2TemplateTemplate" />
    </java>
    <!-- To get a web.xml and build.xml for the example we just copy them from the
         first example -->
    <copy file="${www.dir}/web.xml" todir="${www.dir}/example2" />
    <copy file="${www.dir}/build.xml" todir="${www.dir}/example2" />
  </target>

  <target name="war"
          depends="doc">
    <ant dir="${www.dir}" />
    <ant dir="${www.dir}/example2" />
  </target>

  <target name="zip"
          depends="doc">
    <zip destfile="${www.dir}/foobar.zip"
         basedir="${www.dir}"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
    <zip destfile="${www.dir}/example2/foobar.zip"
         basedir="${www.dir}/example2"
         includes="src/**,templates/**,web.xml,build.xml">
    </zip>
  </target>

  <target name="build"
          depends="war,zip" />

  <target name="cvsignores">
    <echo file=".cvsignore">.cvsignore ${build.dir} build.properties
</echo>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <target name="spotless" depends="clean">
    <delete file=".cvsignore"/>
  </target>

</project>
