<%farg content></%farg>\
<%args>
  String separator;
  String beginInsert => "<b>";
  String endInsert => "</b>";
</%args>\
<%import>
  java.io.Writer;
  java.io.StringWriter;
  java.util.StringTokenizer;
  bmsi.util.Diff;
</%import>\
<%java>
  Writer oldWriter = getWriter();
  StringWriter buffer = new StringWriter();
  writeTo(buffer);
</%java>\
<& content &>\
<%class>
  private Object[] getLinesFor(String p_text)
  {
    StringTokenizer tokenizer = new StringTokenizer(p_text,"\n");
    String[] tokens = new String[tokenizer.countTokens()];
    for (int i = 0; i < tokens.length; ++i)
    {
      tokens[i] = tokenizer.nextToken() + '\n';
    }
    return tokens;
  }
</%class>\
<%java>
  writeTo(oldWriter);
  String text = buffer.toString();
  int ix = text.indexOf(separator);
  Object[] second = getLinesFor(text.substring(ix + separator.length()));
  Diff diff = new Diff(getLinesFor(text.substring(0, ix)),second);
  diff.no_discards = true;
  Diff.change change = diff.diff_2(false);
  int last = 0;
  while (change != null)
  {
    for (int i = last; i < change.line1; ++i)
    {
</%java><% second[i] %><%java>
    }
    for (int i = 0; i < change.inserted; ++i)
    {
</%java><% beginInsert #n %><% second[change.line1 + i] %><% endInsert #n %><%java>
    }
    last = change.line1 + change.inserted;
    change = change.link;
  }
  for (int i = last; i < second.length; ++i)
  {
</%java><% second[i] %><%java>
  }
</%java>