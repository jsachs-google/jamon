<&| _Base; title => "Jamon Template Reference Manual" &>
    <ol>

      <li><span class="concept">Static content</span>

        In general, any characters appearing in a template are output
        literally, whitespace included.

      <li><span class="concept">Java escapes</span>

        The value of a java expression can be emitted by enclosing the
        expression in <code>&lt;%...%&gt;</code> pairs, e.g.
        <&| _template &><%LITERAL>
<% person.getFirstName().substring(0,10) %>
</%LITERAL></&>

        <p>
          Arbitrary Java code can be inserted into the template using
          <code>&lt;%java&gt;...&lt;/%java&gt;</code>, e.g.
        <&| _template &><%LITERAL>
<%java>
  while (iter.hasNext()) {
    Person p = (Person) iter.next();
    if (p.getLastName().startsWith("S")) {
</%java>
      <% p.getLastName() %>'s last name doesn't start with 'X'.
<%java>
    }
  }
</%java></%LITERAL></&>
        Alternatively, any line beginning with '<code>%</code>' also is
        assumed to contain valid Java code. The previous example could
        be equivalently (and perhaps more clearly) written as
        <&| _template &><%LITERAL>
%  while (iter.hasNext()) {
%    Person p = (Person) iter.next();
%    if (p.getLastName().startsWith("S")) {
      <% p.getLastName() %>'s last name doesn't start with 'X'.
%    }
%  }
</%LITERAL></&>
    <p>

      The kinds of Java code that can appear in an escape is fairly
      unrestricted. Be warned, however, that code is emitted inside a
      method body. Thus, for example, package declarations and import
      statements would trigger a compilation error.

    <p>
      Before a Java expression is emitted, the string that represents it
      is <em>escaped</em>.  The default escaping mechanism is HTML, so for
      example the following template
<&| _template &><%LITERAL>this <% "&" %> that</%LITERAL></&>
      produces
<pre class="tty">
this &amp;amp; that
</pre>
      However different escaping mechanisms can be specified in the
      template itself.  A string can be emitted with no escaping as
      follows:
<&| _template &><%LITERAL>this <% "&" #n %> that</%LITERAL></&>
      producing
<pre class="tty">
this &amp; that
</pre>
     The available escaping mechanism are
     <ul>
       <li>
         HTML (use <code>#h</code> in the emit block) -- produces
         output suitable for inclusion in the body of HTML elements
       </li>
       <li>
         Strict HTML (use <code>#H</code> in the emit block) --
         produces output suitable for use as an HTML attribute value
         (it is similar to HTML escaping but also escapes quotes and
         apostrophes)
       </li>
       <li>XML (use <code>#x</code> in the emit block)</li>
       <li>URL (use <code>#u</code> in the emit block)</li>
       <li>None (use <code>#n</code> in the emit block)</li>
     </ul>

   <p>

     In addition the <em>default</em> escaping mechanism can also be
     changed, however this is done from outside the template, see the
     Jamon <a href="UserGuide.html">user's guide</a> for further
     details.

    <li><span class="concept">Comments</span>

      Any template content between <code>&lt;%doc&gt;</code> and
      <code>&lt;/%doc&gt;</code> is considered "documentation", and
      ignored by the template processor

    <li><span class="concept">Imports</span>

      Java classes or packages to be imported and used in a template
      should be placed inside an <code>&lt;%import&gt;</code>
      block. Each package or class should be separated by a semicolon
      ('<code>;</code>').
      <p>
      For example:
      <&| _template &><%LITERAL>
<%import>
  java.util.Iterator;
  org.modusponens.myapp.data.*;
</%import></%LITERAL></&>

    <li><span class="concept">Class code</span> Any code to be
      included in the generated class should be placed inside a
      <code>&lt;%class&gt;</code> block.
      <p>
      For example:
      <&| _template &><%LITERAL>
<%class>
  static int pageViews = 1;
</%class>
This component has been accessed <% pageViews++ %> times.
</%LITERAL></&>

    <li><span class="concept">Arguments</span>

      Arguments to a template are specified in
      <code>&lt;%args&gt;</code> ... <code>&lt;/%args&gt;</code>
      blocks. Each argument consists of a type followed by the
      argument name, optionally followed by <code>=&gt;</code> and a
      default value. Each argument must appear on a separate line, and
      each argument declaration must be terminated by a semicolon.

    <p>
      Arguments are usable inside any (top-level) java escape or java
      expression in the template. Technically, they are declared
      "<code>final</code>", so it is not possible to (re)assign a
      value to a template argument.

    <p>
      For example:
      <&| _template &><%LITERAL>
<%args>
  String[] nicknames => new String[0];
  Address address;
  java.util.Iterator friends;
</%args>
Your nicknames are
<ul>
% for (int i = 0; i < nicknames.length; ++i) {
    <li> <% nicknames[i] %>
% }
</ul>
% while (friends.hasNext()) {
%   Person p = (Person) friends.next();
%   if (p.getAddress().getPostalCode().equals(address.getPostalCode())) {
      Hey, guess what? <% p.getName() %> lives close by!
%   }
% }
</%LITERAL></&>
    Note that for this template to compile, the <code>Address</code>
    class would need to appear in an <code>&lt;%import&gt;</code>
    block.
        <p>
          Arguments with default values are optional, and need not be
          specified when invoking a template. At the top-level
          (i.e. the interface to "standard" java code), optional
          arguments are implemented as "setters" on the template
          object rather than as arguments to the <code>render</code>
          method.

    <li><span class="concept">Private template methods</span>

      Private template methods ("<def>defs</def>") can be declared via
      the <code>&lt;%def <i>def-name</i>&gt;</code>
      instruction. Defs may be declared to accept arguments similar to
      templates by using <code>%args</code>.
        <p>
          Methods can be invoked via the <code>&lt;&amp;
          <i>def-name</i>; argument1; ... &amp;&gt;</code>
          construct.
        <p>
          For example:
        <&| _template &><%LITERAL>
<%def _row>
  <%args>
    String name;
    int age;
  </%args>
  <tr>
    <td align="left"><% name %></td>
    <td>&nbsp;</td>
    <td align="center"
%     if (age < 18) {
        bgcolor="red"
%     }
    >
      <% age %>
    </td>
  </tr>
</%def>

<table>
  <& _row; name => "Mickey"; age => 46 &>
  <& _row; name => "Junior"; age => 8 &>
  <& _row; name => "Minnie"; age => 25 &>
</table>
</%LITERAL></&>
        produces
        <pre class="tty"><&| /org/jamon/escape/Html &><%LITERAL>
<table>
  <tr>
    <td align="left">Mickey</td>
    <td>&nbsp;</td>
    <td align="center"
    >
      46
    </td>
  </tr>
  <tr>
    <td align="left">Junior</td>
    <td>&nbsp;</td>
    <td align="center"
        bgcolor="red"
    >
      8
    </td>
  </tr>
  <tr>
    <td align="left">Minnie</td>
    <td>&nbsp;</td>
    <td align="center"
    >
      25
    </td>
  </tr>
</table>
</%LITERAL></&></pre>
        <p>
          Defs can invoke other defs in the same template, and can be
          directly or indirectly recursive. Arguments to defs can be
          given default values.

      <li>
        <span class="concept">Invoking other templates</span>

        It is also possible to invoke other templates from within a
        template. Instead of supplying the def name, simply supply the
        path to the template, e.g. in <code>/img/spacer</code>:
        <&| _template &><%LITERAL>
<%args>
  int width => 1;
  int height => 1;
</%args>
<img src="transparentpixel.gif"
     width="<% width %>"
     height="<% height %>"
     border="0">
</%LITERAL></&>
        This can be invoked from other templates like
        <&| _template &><%LITERAL>
<table>
  <tr>
    <td align="left">Name</td>
    <td><& /img/spacer; width => 12 &></td>
    <td>Age</td>
  </tr>
  ...
</table>
</%LITERAL></&>

    <li><span class="concept">Fragment arguments</span>

        It is possible to pass a "fragment" of a template as an
        argument to another template (or a <code>def</code>).  When
        passing template fragments, the invocation syntax must look
        like <code>&lt;&amp;| <i>target</i>; arg1 =&gt;
        ... &amp;&gt;</code>, and any template content up until a
        closing <code>&lt;/&amp;&gt;</code> is considered the fragment
        argument.
        <p>
          In order to pass a fragment argument, the target template or
          def must declare that it expects a fragment argument. This
          is done using the <code>&lt;%farg
          <i>name</i>&gt;&lt;/%farg&gt;</code> declaration, which
          declares that the template (or def) expects a fragment
          argument.
        <p>
          The fragment can be invoked in the target template or def
          like any other template or def invocation, simply specifying
          the name of the fragment argument as the target
        <p>
          Putting this all together, the template
        <&| _template &><%LITERAL>
<%def _lilink>
  <%farg content>
  </%farg>
  <%args>
    String href;
  </%args>
  <li><a href="<% href %>"><& content &></a></li>
</%def>

<%def _big>
  <%farg stuff>
  </%farg>
<font size="+4"><& stuff &></font>
</%def>

<ul>
  <&| _lilink; href => "index.html" &>Home</&>
  <&| _lilink; href => "faq.html" &><b>FAQ</b></&>
  <&| _lilink; href => "toc.html" &><& _big &>Table of contents</&>
</ul>
</%LITERAL></&>
        produces
        <pre class="tty"><&| /org/jamon/escape/Html &>
<ul>
  <li><a href="index.html">Home</a></li>
  <li><a href="faq.html"><b>FAQ</b></a></li>
  <li><a href="toc.html"><font size="+5">Table of contents</font></a></li>
</ul>
</&></pre>

    <li><span class="concept">Parametrized fragment arguments</span>

      Template fragments can themselves take arguments.  The
      invocation syntax is similar to a regular template fragment with
      the addition of an
      <code>&lt;%args&gt;</code>...<code>&lt;/%args&gt;</code> inside
      the fragment.
      <p>
      To pass a parameterized template fragment to a <code>def</code>
      (or another template) the fragment and its parameters must be
      declared via a <code>&lt;%farg
      <i>name</i>&gt;</code> <i>parameters</i> <code>&lt;/%farg&gt;</code>,
      where each parameter is a type followed by an identifier. Thus
      a <code>&lt;%farg
      <i>name</i>&gt;</code>...<code>&lt;/%farg&gt;</code> is similar
      to a
      <code>&lt;%args&gt;</code>...<code>&lt;/%args&gt;</code> except
      it has a name and its parameters cannot have default values.
      Inside the <code>def</code> (or template) the parameterized
      fragment is invoked exactly like a call to a <code>def</code>
      whose name is the name of the fragment.

      <p>
      For example <&| _template &><%LITERAL>
<%def _list>
  <%farg display>
    float temperature;
  </%farg>
  <%args>
    float[] temps;
  </%args>
<ul>
% for (int i = 0; i < temps.length; i++) {
  <li><& display; temperature => temps[i] &>
% }
</ul>
</%def>

<&| _list; temps => new float[] { -13.0, 34.0 }  &>
  <%args>
    float temperature;
  </%args>
% if (temperature > 0.0) {
  water at <% temperature %> degrees
% } else {
  <b>ice</b>
% }
</&>
</%LITERAL></&>
produces <pre class="tty"><&| /org/jamon/escape/Html &>
<ul>
  <li><b>ice</b>
  <li>water at 34.0 degrees
</ul>
</&></pre>
(in fact it produces the above with some extra whitsepace).

  </ol>
</&>

<%def _template><%farg content></%farg>
<pre class="template"><&| /org/jamon/escape/Html &><& content &></&></pre>
</%def>
