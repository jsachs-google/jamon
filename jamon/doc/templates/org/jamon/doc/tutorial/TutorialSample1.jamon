<%extends _TutorialSampleBase>
<%class>
  protected int tutorialStage() { return 1; }
</%class>

<%override title>Jamon Tutorial - Getting Started with Hello World</%override>

<h2>Jamon Tutorial - Getting Started with Hello World</h2>

The source files mentioned in this tutorial are available individually
where first referenced, or bundled in a <a href="JamonTutorial.zip">zip
file</a>.

<div class="note">
  <b>NOTE</b>: If you have a Java Runtime (JRE) installed in addition
  to a Software Development Kit (SDK), be sure that the binaries
  (i.e. java, javac, etc) of the SDK come <emph>first</emph> in your
  PATH.
</div>

<ol>

<li>
Create a Jamon template
<a href="HelloTemplate.jamon" class="file">HelloTemplate.jamon</a>:
<& ../_TemplateInclude; fileName => "tutorial/templates/HelloTemplate" &>


<li>
Create a java file <a class="file" href="HelloTut1.java">HelloTut1.java</a>:
<& ../_JavaInclude; fileName => "tutorial/src/HelloTut1" &>
The code then calls the
<code>render()</code> method on the template, providing a
<code>Writer</code> that the template will use to output its content.

<li>
Set your classpath:
<table>
  <tr>
    <td class="system">Windows</td>
   <td class="tty">C:\JAMONTMP&gt; SET CLASSPATH=.;\path\to\jamon.jar</td>
  </tr>
  <tr>
    <td class="system">Unix (sh, bash, zsh, ksh)</td>
    <td class="tty">$ export CLASSPATH=.:/path/to/jamon.jar</td>
  </tr>
  <tr>
    <td class="system">Unix (csh, tcsh)</td>
    <td class="tty">% setenv CLASSPATH .:/path/to/jamon.jar</td>
  </tr>
</table>

<li>
Process the template:
<pre class="tty"
 >java org.jamon.TemplateProcessor --destDir=. HelloTemplate</pre>

<li>
Compile everything:
<pre class="tty">javac HelloTut1.java HelloTemplate*.java</pre>

<li>
Run it:
<pre class="tty">java HelloTut1</pre>

<li>
You should see:
<& ../_RunJava; className => "HelloTut1" &>

</ol>
<p>
<h2>Template Constraints and Variations</h2>

An important constraint on calling a Jamon template
is that a template instance cannot have its
<code>render()</code> method called twice. Instead, the user must
create a new template instance (a cheap operation) each time the
template is to be displayed.
<pre class="java">
    OutputWriter ouputWriter = new OutputStreamWriter(System.out);
    new HelloTemplate().render(outputWriter);

    // do more work

    // create a NEW template instance
    new HelloTemplate().render(outputWriter);
</pre>
<p>
If the above code had called the <code>HelloTemplate</code> instance's
<code>render()</code> method twice, Jamon would have generated an
exception.
