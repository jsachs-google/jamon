<%extends _TutorialBase>
<%args>
  String output;
</%args>

<%override title>Jamon Tutorial - More Advanced Jamon Tags</%override>

<h2>Jamon Tutorial - More Advanced Jamon Tags</h2>

Jamon templates are translated into Java classes and interfaces. Jamon provides several tags to give the template author more control over how declarations in the template get translated into Java constructs.

<ol>
  <li><span class="concept">Jamon comments</span>
    The Jamon comment tag, <code>&lt;%doc></code> ... <code>&lt;/%doc></code>
    causes all text between the begin and end tags to be ignored by
    the Jamon processor and the Java compiler.

  <li><span class="concept">Import statements</span>
    The example templates shown up to this point have completely specified every Java class not in the <code>java.lang</code> package. In the tutorial section on <a href="TutorialSample3.html">Templates with arguments</a> the examples contained the declarations
      <&| ../_Template &>
<%LITERAL>
<%args>
  java.util.Date effectiveDate;
  String userName;
  java.math.BigDecimal totalBalance;
</%args>
</%LITERAL>
</&>
    <p>
    Jamon provides the <code>&lt;%import></code> ... <code>&lt;/%import></code>
    tag to allow the user to import classes for the template.
      <&| ../_Template &>
<%LITERAL>
<%import>
  java.util.Date;
  java.math.BigDecimal;
</%import>
<%args>
  Date effectiveDate;
  String userName;
  BigDecimal totalBalance;
</%args>
</%LITERAL>
</&>

  <li><span class="concept">Class scope declarations</span>
    The Java code included in the template by the <code>%</code> and
    <code>&lt;%java></code> ... <code>&lt;/%java></code> escapes
    is translated into statements inside methods on a Java class
    created from the template.
    <p>
    For example, the template fragment below
      <&| ../_Template &>
<%LITERAL>
% int count = 3;
% while (count-- > 0) {
    Hello world!
% }
</%LITERAL>
</&>
    is translated into Java code inside a method that looks something like:

<pre class="code">
    int count = 3;
    while (count-- > 0) {
    this.write("    Hello world!\n");
    }
</pre>
    To add variables or methods to the class which contains these
    methods, use the <code>&lt;%class></code> ... <code>&lt;/%class></code>
    tag. For example, the following Jamon template
    <&| ../_Template &><%LITERAL>
<%class>
  static int pageViews = 1;
</%class>
This component has been accessed <% pageViews++ %> times.
</%LITERAL></&>
    generates a Java file looking something like
<pre class="java">
public class SomeTemplateImpl
{
  static int pageViews = 1;

  public void render() throws java.io.IOException
  {
    this.write("\nThis component has been accessed ");
    this.writeEscaped(this.valueOf(pageViews++ ));
    this.write(" times.\n\n");
  }
}
</pre>
 <p>
    Any Java code that is legal at the class level, including fields, methods, and classes, may be declared in a Jamon template between the <code>&lt;%class></code> ... <code>&lt;/%class></code> tags.
</ol>
<h3>An Example</h3>
    The template below,      <a href="ClassExampleTemplate.jamon" class="file">
        <code>ClassExampleTemplate</code></a>,
    imports three classes, <code>java.util.Date, java.text.DateFormat</code>,
    and <code>java.text.SimpleDateFormat</code>. It also defines two
    class static fields and one method. The template code uses all of
    these fields and method to output the desired text.
    <& _TutorialTemplateInclude; fileName => "ClassExampleTemplate" &>

<p>
When this template is called by the java code
<a class="file" href="ClassExampleTut5.java">ClassExampleTut5.java</a>:
<& _TutorialJavaFileInclude; fileName => "ClassExampleTut5" &>

the output of the template's <code>render</code> method will be
    <pre class="tty"><% output %></pre>

<p>
