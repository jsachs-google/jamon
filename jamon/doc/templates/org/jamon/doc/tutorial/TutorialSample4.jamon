<%extends _TutorialSampleBase>
<%class>
  protected int tutorialStage() { return 4; }
</%class>

<%override tutorialName>Escaping Text</%override>

Templates usually construct text in a structured language such as HTML or XML, or even URLs. Each of these languages has restrictions on allowed characters or sequence of characters. Escaping modifies a string to adhere to the rules of the particular language in which the string will be expressed.

<h3> Rules for escaping text </h3>

  <ol>
    <li><span class="concept">Static content</span>

      In general, any characters appearing in a template are output
      literally, whitespace included.  One notable exception is that
      if a newline is preceded by a backslash, then neither the newline nor
      the backslash are output.

    <li><span class="concept">Emit statements</span>

      The value of a java expression can be emitted by enclosing the
      expression in <code>&lt;%...%&gt;</code> pairs, e.g.
      <&| ../_Template &><%LITERAL>
<% person.getFirstName().substring(0,10) %>
</%LITERAL></&>
      <p>
      <div class="note">&nbsp;Note that there must be at least one
      whitespace character following the <code>&lt;%</code>.&nbsp;</div>

      <p>

      Before a Java expression is emitted, the string that represents
      it is <em>escaped</em>.  The usual default escaping mechanism is
      HTML, so for example the following template

      <&| ../_Template &><%LITERAL>this <% "&" %> that</%LITERAL></&>

      produces

      <pre class="tty">this &amp;amp; that</pre>

      However different escaping mechanisms can be specified in the
      template itself.  A string can be emitted with no escaping as
      follows:

      <&| ../_Template &><%LITERAL>this <% "&" #n %> that</%LITERAL></&>

      producing

      <pre class="tty">this &amp; that</pre>

      The available escaping mechanism are
      <ul>
        <li>
          HTML (use <code>#h</code> in the emit block) -- produces
          output suitable for inclusion in the body of HTML elements
        </li>
        <li>
          Strict HTML (use <code>#H</code> in the emit block) --
          produces output suitable for use as an HTML attribute value
          (it is similar to HTML escaping but also escapes quotes and
          apostrophes)
        </li>
        <li>XML (use <code>#x</code> in the emit block)</li>
        <li>URL (use <code>#u</code> in the emit block)</li>
        <li>None (use <code>#n</code> in the emit block)</li>
      </ul>

      <p>

    <li><span class="concept">Setting the default escaping mechanism</span>

       The default escaping rule for a template is HTML.  This default
       can be changed for a particular template by using the
       directive <code><%LITERAL><%escape #?></%LITERAL></code>.
  </ol>



    <h4>Example</h4>

    Suppose the template
     <a href="EscapingTemplateA.jamon" class="file"
        type="text/plain" ><code>EscapingTemplateA</code></a> contains
    <& ../_TemplateInclude: "/sample/tutorial/templates/EscapingTemplateA" &>

<p>
If this template is called by the java code
<a class="file" href="EscapingTut4a.java" type="text/plain" >
EscapingTut4a.java</a>:
<& ../_JavaInclude: "/sample/tutorial/src/EscapingTut4a" &>

Then the output of the template's <code>render</code> method will be
<& ../_RunJava; className => "EscapingTut4a" &>

<p>
In contrast, if the template
     <a href="EscapingTemplateB.jamon" class="file"
        type="text/plain" ><code>EscapingTemplateB</code></a> containing
    <& ../_TemplateInclude: "/sample/tutorial/templates/EscapingTemplateB" &>

<p>
is called by the java code
<a class="file" href="EscapingTut4b.java"
   type="text/plain">EscapingTut4b.java</a>:
<& ../_JavaInclude: "/sample/tutorial/src/EscapingTut4b" &>

Then the output of the template's <code>render</code> method will be
<& ../_RunJava; className => "EscapingTut4b" &>
