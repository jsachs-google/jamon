<&| _Base; title => "Jamon"; section => "Home" &>
    <h2>What is Jamon?</h2>

    <b>Jamon</b> is a text template engine for <a
    href="http://java.sun.com">Java</a>, useful for generating dynamic
    HTML, XML, or any text-based content. The syntax of the templates
    is roughly based on <a href="http://www.masonhq.com">Mason</a>,
    which is written in and for <a
    href="http://www.perl.org">Perl</a>.

    <p>
      Notable features:
    </p>

    <ul>

      <li>
        Jamon has a rich feature set to support encapsulation,
        parameterization, and reuse of presentation logic.
      </li>

      <li>
        You can pass arbitrary objects between templates (only <a
        href="http://opensource.go.com/Tea/index.html">Tea</a> seems
        to provide this capability).  In particular, Jamon templates
        can pass arbitrary dynamic content (i.e. template fragments)
        as parameters to other templates.
      </li>

      <li>
        Templates are compiled into Java and then into bytecode, and
        are used in applications just like any other Java class. This
        provides compile-time type-checking and superior
        performance. During development, however, changes to template
        sources at runtime trigger dynamic retranslation and
        recompilation of the templates. This dynamic recompilation can
        be turned off for production deployment.
      </li>

      <li>
        Jamon is general-use in the sense that it can produce
        arbitrary output format (for example,
        <a href="http://xmlc.enhydra.org">Enhydra XMLC</a> and <a
        href="http://www.zope.org">Zope</a> are tied to HTML or
        XML). Consider generating text and / or multipart MIME email,
        or program source code.
      </li>

    </ul>

    <h2>What isn't Jamon?</h2>

    Jamon provides neither the functionality of a <a
    href="http://ootips.org/mvc-pattern.html">controller</a>, nor that
    of a <a
    href="http://java.sun.com/products/servlet/">servlet</a>. Though
    servlets and controllers often end up generating dynamic text
    and/or html, those functions are better served by components in
    the <emph>view</emph>, or the <emph>presentation</emph> layer.

    <h2>Why is Jamon?</h2>

    The inspiration for Jamon was born over dissatisfaction with
    current presentation layer technologies, including JSP and
    Velocity, and a surprisingly pleasant experience with Mason.

</&>
