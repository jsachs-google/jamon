<&| _Base; title => "Jamon"; section => "Home" &>

    <b>Jamon</b> is a text template engine for <a
    href="http://java.sun.com">Java</a>, useful for generating dynamic
    HTML, XML, or any text-based content. In a typical
    <a href="http://ootips.org/mvc-pattern.html">Model-View-Controller
    architecture</a>, Jamon clearly is aimed at the View (or
    presentation) layer.

    <p>
    The motivations for Jamon came from dissatisfaction with current
    presentation layer technologies such <a
    href="http://java.sun.com/products/jsp/">JSP</a> and
    <a href="http://jakarta.apache.org/velocity/">Velocity</a>. Ideas
    was also drawn from a surprisingly pleasant experience with
    <a href="http://www.masonhq.com">Mason</a>, which though written in
    and for <a href="http://www.perl.org">Perl</a>, provided inspiration
    both conceptual and syntactic (for better or worse).
    </p>


    <h4>Highlights</h4>

    <ul>

      <li>
        Jamon has a rich feature set to support encapsulation,
        parameterization, functional decomposition, and reuse of
        presentation logic.
      </li>

      <li>
        Since rendering logic may be arbitrarily complicated
        (e.g. rendering hierarchical data such as a recursive
        directory structure), this logic needs to be expressable in a
        Turing-complete language. Rather than invent yet another
        language, use Java itself inside the presentation
        framework. <emph>Jamon helps keep the rendering logic in the
        presentation layer technology</emph>.
      </li>

      <li>
        Jamon templates declare the arguments required for
        rendering. This provides a well-defined contract between the
        presentation layer and the application.
      </li>

      <li>
        Jamon allows passing arbitrary objects between templates
        (only <a
        href="http://opensource.go.com/Tea/index.html">Tea</a> seems
        to provide this capability).  Jamon templates can pass
        arbitrary dynamic content (i.e. template fragments) as
        parameters to other templates. (In fact, Jamon allows
        passing <emph>parameterized</emph> fragments, i.e. templates
        can be "higher-order".)
      </li>

      <li>
        Templates are compiled into Java and then into bytecode, and
        are referred to in application code just like any other Java
        class.  See the <a href="QuickStart.html">quick start
        tutorial</a> for a simple but complete working example.
      </li>

      <li>
        Templates are translated into Java classes with public methods
        whose signatures reflect the arguments declared in the
        templates. This provides compile-time type-checking as well as
        excellent performance.
      </li>

      <li>
        During development, changes to template sources at runtime
        trigger dynamic retranslation and recompilation of the
        templates. This dynamic recompilation can be turned off for
        production deployment.
      </li>

      <li>
        Jamon is general-use in the sense that it can produce any
        arbitrary text output format (for contrast,
        <a href="http://xmlc.enhydra.org">Enhydra XMLC</a> and <a
        href="http://www.zope.org">Zope</a> are tied to HTML or
        XML). Consider "views" such as generating text and / or
        multipart MIME email, or program source code.
      </li>

    </ul>

</&>
