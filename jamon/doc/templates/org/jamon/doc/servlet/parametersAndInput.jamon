<span class="concept">Passing parameters and receiving input</span>

In this section we elaborate on the previous example by passing the
template some parameters.  Then we allow the user to submit values and
have them processed by the template.

<p>

Suppose we want a servlet that will print out the above message an
arbitrary number of times.  We can do this with the following
template.

<& _showTemplateDiff; oldName => "HelloTemplate";
                      newName => "HelloTemplate2" &>

(You should be able to distinguish lines that are <span class="changed">new or
changed</span><span class="deleted"> or deleted</span>).

<& _showSourceDiff; oldName => "HelloServlet";
                    newName => "HelloServletSnippet" &>

(note that Java code identical to the previous example has been
omitted.)  The above code will result in "Hello World!" being printed
out ten times.

<p>
Suppose we want the user to be able to specify the number times the message is
displayed.  We can achieve that with a template such as:

<& _showTemplateDiff; oldName => "HelloTemplate2";
                      newName => "HelloTemplate3" &>

The corresponding servlet would look like:

<& _showSourceDiff; oldName => "HelloServletSnippet";
                    newName => "HelloServletSnippet2" &>

However, there is something unsatisfactory about this:

<div class="smell">
  <dl>
    <dt>Smell #1</dt>
    <dd>The name of the CGI parameter "num" is independently specified in two places.</dd>
  </dl>
</div>

Since the object responsible for parsing the parameter seems like the
natural owner of the name of the parameter, for the moment we reduce
the smell by doing this:

<& _showTemplateDiff; oldName => "HelloTemplate3";
                      newName => "HelloTemplate4" &>

and

<& _showSourceDiff; oldName => "HelloServletSnippet2";
                    newName => "HelloServletSnippet3" &>

The next problem to address is the fact that no validation is
performed on the data coming from the web.  For example a user may
enter "a" as the number of times they want to be greeted which would
cause the <span class="code">doGet</span> method to throw a <span
class="code">NumberFormatException</span>.  Thus we need to catch this
as follows (unchanged code is omitted).  In the servlet we need:

<& _showSourceDiff; oldName => "HelloServletSnippet3";
                    newName => "HelloServletSnippet4" &>

and the template needs an additional error parameter:

<& _showTemplateDiff; oldName => "HelloTemplate4";
                      newName => "HelloTemplate5" &>

However, in spite of all this the servlet leaves a great deal to be
desired.  For example invalid input should be returned to the user for
editing.  Furthermore there are other ways the above solution seems
inadequate:

<div class="smell">
  <dl>
    <dt>Smell #2</dt>
    <dd>Catching errors seems <em>ad hoc</em> and hard to extend.</dd>

    <dt>Smell #3</dt>
    <dd>The servlet doesn't seem like the right place to be doing validation.</dd>
  </dl>
</div>
The next section presents solutions to these problems.

<%def _showTemplateDiff>
  <%args>
    String oldName;
    String newName;
  </%args>

<pre class="template">\
<& _showDiff; oldName => "/sample/servlet/templates/" + oldName + ".jamon";
              newName => "/sample/servlet/templates/" + newName + ".jamon" &>\
</pre>
</%def>

<%def _showSourceDiff>
  <%args>
    String oldName;
    String newName;
  </%args>

<pre class="template">\
<& _showDiff; oldName => "/sample/servlet/src/" + oldName + ".java";
              newName => "/sample/servlet/src/" + newName + ".java" &>\
</pre>
</%def>
