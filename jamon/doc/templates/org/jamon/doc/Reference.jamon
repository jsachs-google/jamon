<%extends _Base>

<%class>
  protected Section currentSection() { return Section.DOC_REFERENCE; }
</%class>

<%override title>Jamon Template Reference Manual</%override>

<%alias>
  escape => /org/jamon/escape;
</%alias>

<h2>Template Reference Manual</h2>
<ol>
  <li><span class="concept">Static content</span>

    In general, any characters appearing in a template are output
    literally, whitespace included.

    This excludes whitespace inside <&| /org/jamon/escape/Html
    &><%LITERAL> <%args>, <%xargs>, <%import>, <%alias>, <%absmeth>, and
    <%frag> declarations.  </%LITERAL></&>

    Other ignored white space includes whitespace immediately after
    the following tags:
    <ul class="referenceTagList">
      <li><% "</%args>" %></li>
      <li><% "</%doc>" %></li>
      <li><% "</%frag>" %></li>
      <li><% "</%xargs>" %></li>
      <li><% "<%abstract>" %></li>
      <li><% "</%class>" %></li>
      <li><% "</%import>" %></li>
      <li><% "</%implements>" %></li>
      <li><% "</%java>" %></li>
      <li><% "<%def ...>" %> and <% "</%def>" %></li>
      <li><% "</%absmeth>" %></li>
      <li><% "<%method ...>" %> and <% "</%method>" %></li>
      <li><% "<%override ...>" %> and <% "</%override>" %></li>
      <li><% "</%alias>" %></li>
    </ul>

    If you would like to force whitespace to appear after one of the
    above tags, you can follow the tag with a backslash and a
    newline; whitespace after that will be emitted.

    <br />
    <b>Newline escape</b><br />

    One other notable exception is that if a newline is preceded by
    a backslash, then neither the newline nor the backslash are
    output.

  <li><span class="concept">Emit statements</span>

    The value of a java expression can be emitted by enclosing the
    expression in <code>&lt;%...%&gt;</code> pairs, e.g.
    <&| _Template &><%LITERAL>
<% person.getFirstName().substring(0,10) %>
</%LITERAL></&>
    Note that there must be at least one whitespace character
    following the <code>&lt;%</code>.

    <p>

    Before a Java expression is emitted, the string that represents it
    is <em>escaped</em>.  The default escaping mechanism is HTML, so for
    example the following template

    <& _TemplateInclude: "/templates/org/jamon/doc/reference/escapedEmit" &>
    produces

    <pre class="tty"><&| escape//Html &><& reference/escapedEmit &></&></pre>

    However different escaping mechanisms can be specified in the
    template itself.  A string can be emitted with no escaping as
    follows:

    <& _TemplateInclude: "/templates/org/jamon/doc/reference/unescapedEmit" &>
    producing

    <pre class="tty"><&| escape//Html &><& reference/unescapedEmit &></&></pre>

    The available escaping mechanism are
    <ul>
      <li>
        HTML (use <code>#h</code> in the emit block) -- produces
        output suitable for inclusion in the body of HTML elements
      </li>
      <li>
        Strict HTML (use <code>#H</code> in the emit block) --
        produces output suitable for use as an HTML attribute value
        (it is similar to HTML escaping but also escapes quotes and
        apostrophes)
      </li>
      <li>XML (use <code>#x</code> in the emit block)</li>
      <li>URL (use <code>#u</code> in the emit block)</li>
      <li>None (use <code>#n</code> in the emit block)</li>
    </ul>

    <p>

    In addition the <em>default</em> escaping mechanism can also be
    changed, however this is done from outside the template, see the
    Jamon <a href="UserGuide.html">user's guide</a> for further
    details.

  <li><span class="concept">Arbitrary Java code</span>

    <p>
      Arbitrary Java code can be inserted into the template using
      <code>&lt;%java&gt;...&lt;/%java&gt;</code>, e.g.
    <&| _Template &><%LITERAL>
<%java>
  while (iter.hasNext()) {
    Person p = (Person) iter.next();
    if (p.getLastName().startsWith("S")) {
</%java>
      <% p.getLastName() %>'s last name doesn't start with 'X'.
<%java>
    }
  }
</%java></%LITERAL></&>
    Alternatively, any line beginning with '<code>%</code>' also is
    assumed to contain valid Java code. The previous example could
    be equivalently (and perhaps more clearly) written as
    <&| _Template &><%LITERAL>
%  while (iter.hasNext()) {
%    Person p = (Person) iter.next();
%    if (p.getLastName().startsWith("S")) {
      <% p.getLastName() %>'s last name doesn't start with 'X'.
%    }
%  }
</%LITERAL></&>
    <p>

    The kinds of Java code that can appear is fairly
    unrestricted. Be warned, however, that code will appear inside a
    method body. Thus, for example, package declarations and import
    statements would trigger a compilation error.

  <li><span class="concept">Inheritance</span>

    Templates can inherit from other templates.  A template is an
    "abstract" template if it contains a <code>&lt;%abstract&gt;</code>
    tag.  A template extends another template by
    means of an <code>&lt;%extends <var>pathToParent</var>&gt;</code>
    tag.  There can be multiple levels of inheritance:
    <code>/grandchild</code> can extend <code>/child</code>, which
    in turn can extend <code>/parent</code>.  When Jamon encounters
    a <code>&lt;&amp; *CHILD &amp;&gt;</code> tag, it inserts the
    results of rendering the child template.

    <p>

    For example, suppose <code>/restaurant/Menu</code> contains:
    <& _TemplateInclude: "/templates/restaurant/Menu" &>
     and <code>/restaurant/Lunch</code> contains:
    <& _TemplateInclude: "/templates/restaurant/Lunch" &>

    Then rendering <code>/restaurant/Lunch</code> produces
    <pre class="tty"><&| escape//Html &><& /restaurant/Lunch &></&></pre>

  <li><span class="concept">Class code</span>

    Any code to be included in the generated class should be placed
    inside a <code>&lt;%class&gt;</code>
    ... <code>&lt;/%class&gt;</code> block.  If one template
    inherits from another, there is corresponding inheritance of
    java classes.  As a result, protected members declared in a
    parent template's <code>&lt;%class&gt;</code>
    ... <code>&lt;/%class&gt;</code> block will be visible to the
    child.

    <p>
    For example:
    <&| _Template &><%LITERAL>
<%class>
  static int pageViews = 1;
</%class>
This component has been accessed <% pageViews++ %> times.
</%LITERAL></&>

  <li><span class="concept">Comments</span>

    Any template content between <code>&lt;%doc&gt;</code> and
    <code>&lt;/%doc&gt;</code> is considered "documentation", and
    ignored by the template processor

  <li><span class="concept">Imports</span>

    Java classes or packages to be imported and used in a template
    should be placed inside an <code>&lt;%import&gt;</code>
    block. Each package or class should be separated by a semicolon
    ('<code>;</code>').  Note that imports are not inherited, so if you
    use an import to aid in the declaration of an argument type in a
    parent template, you must use the same import in all descendants
    of that template.
    <p>
    For example:
    <&| _Template &><%LITERAL>
<%import>
  java.util.Iterator;
  org.modusponens.myapp.data.*;
</%import></%LITERAL></&>

  <li><span class="concept">Arguments</span>

    Arguments to a template are specified in
    <code>&lt;%args&gt;</code> ... <code>&lt;/%args&gt;</code>
    blocks. Each argument consists of a type followed by the
    argument name, optionally followed by <code>=&gt;</code> and a
    default value. Each argument must appear on a separate line, and
    each argument declaration must be terminated by a semicolon.

    <p>

    Arguments are usable inside any java escape or java expression
    in the template, including those in subtemplates. Top-level
    visible arguments are also usable inside
    <code>&lt;%class&gt;</code> ... <code>&lt;%/class&gt;</code>
    blocks.  Technically, arguments are declared
    "<code>final</code>", so it is not possible to (re)assign a
    value to an argument.

    <p>

    For example:
    <&| _Template &><%LITERAL>
<%args>
  String[] nicknames => new String[0];
  Address address;
  java.util.Iterator friends;
</%args>
Your nicknames are
<ul>
% for (int i = 0; i < nicknames.length; ++i) {
    <li> <% nicknames[i] %>
% }
</ul>
% while (friends.hasNext()) {
%   Person p = (Person) friends.next();
%   if (p.getAddress().getPostalCode().equals(address.getPostalCode())) {
      Hey, guess what? <% p.getName() %> lives close by!
%   }
% }
</%LITERAL></&>
    Note that for this template to compile, the <code>Address</code>
    class would need to appear in an <code>&lt;%import&gt;</code>
    block.

    <p>

    Arguments with default values are optional, and need not be
    specified when invoking a template. At the top-level
    (i.e. the interface to "standard" java code), optional
    arguments are implemented as "setters" on the template
    object rather than as arguments to the <code>render</code>
    method.

    <p>

    If a template inherits from another template, the arguments to
    the template's ancestors are not automatically visible to the
    child template.  They can be made visible to code in the child
    template by declaring them in <code>&lt;%xargs&gt;</code>
    ... <code>&lt;/%xargs&gt;</code> blocks.  Unlike
    <code>&lt;%args&gt;</code> ... <code>&lt;/%args&gt;</code>
    blocks, <code>&lt;%xargs&gt;</code>
    ... <code>&lt;/%xargs&gt;</code> blocks do not specify argument
    types, since those have already been specified by a parent
    template.  Optional arguments, however, may have their default
    values redefined by the child.  For example, if
    <code>/parent</code> contains:
    <&| _Template &><%LITERAL>
<%abstract>
<%args>
  String name;
  String favoriteColor => "red";
  String favoriteFood => "Jamon";
  int luckyNumber => 7;
</%args>
<font color="<% favoriteColor %>">Hello <% name %></font>.
Would you like some <% favoriteFood %>?
<& *CHILD &>
Remember, today's lucky number is <% luckyNumber %>.
</%LITERAL></&>

  then <code>/child</code> might contain:
  <&| _Template &><%LITERAL>
<%extends /parent>
<%args>
  int temperature;
</%args>
<%xargs>
  name;
  favoriteColor => "green"
  luckyNumber;
</%xargs>
Today's temperature is
<font color="<% favoriteColor %>"><% temperature %></font>, which is
% if(temperature != luckyNumber) {
  not
%}
a good sign for you, <% name %>.
</%LITERAL></&>

    Note that it would be an error if <code>/child</code> tried
    referring to <code>favoriteFood</code>'s argument to
    <code>/parent</code> without referencing it in an
    <code>&lt;%xargs&gt;</code> ... <code>&lt;/%xargs&gt;</code>
    block.

  <li><span class="concept">Invoking other templates</span>

    It is possible to invoke other templates from within a template.
    To invoke a template which takes no argument, simply write
    <code><%LITERAL><& <var>template-name</var> &></%LITERAL></code>.
    <p>

    There are two ways to pass arguments to templates: named
    parameters, and positional parameters. Templates can be invoked
    with named parameters via the
    <code>
      <%LITERAL>
        <& <var>template-name</var>;
           <var>argument1</var> => <var>value1</var>; ... &>
      </%LITERAL>
    </code>
    construct.  All arguments without default values
    (i.e. <em>required</em> arguments) must be specified, but
    arguments given default values are optional.  If values are only
    being passed for required arguments, positional parameter syntax
    may be used instead.  The syntax for positional parameters is
    simply
    <code>
      <%LITERAL>
        <& <var>template-name</var>: <var>value1</var>; ... &>
      </%LITERAL>
    </code>
    With positional parameter syntax, arguments are passed in the
    order that they are declared in the
    <code><%LITERAL><%args></%LITERAL></code> section of the
    template.  Note that while with named parameter syntax, the
    template name is followed by a semicolon, positional parameter
    syntax follows the template name with a colon.  In each case,
    semicolons are used to separate parameters.

  <p>

    For example, suppose <code>/accounting/bill</code> contains
    <& _TemplateInclude: "/templates/accounting/bill" &>

    This tempate can be called in the following ways:
    <& _TemplateInclude: "/templates/accounting/summary" &>

    resulting in something like
    <pre class="tty"><& /accounting/summary &></pre>

    When using positional parameter syntax to invoke templates which
    extend abstract templates, first pass the required arguments of the
    parent, and then those of the child.

  <li><span class="concept">Subtemplates</span>

    In addition to calling other templates, a template can call
    "subtemplates" defined within a template.  Subtemplates come in
    two forms, "private" and "protected".  Subtemplates may be
    declared to accept arguments similar to templates by using
    <code>%args</code>.  Subtemplates can invoke other subtemplates in
    the same template, and can be directly or indirectly
    recursive. Arguments to subtemplates can be given default values.

    <p>


    Private subtemplates ("<def>defs</def>") can be declared via the
    <code>&lt;%def <var>def-name</var>&gt;</code> instruction, and are
    only visible within the template in which they are
    declared.


    <p>

    For example:
    <& _TemplateInclude: "/templates/org/jamon/doc/reference/defExample" &>
    produces
    <pre class="tty"><&| escape//Html &><& reference/defExample &></&></pre>
    <p>

    Protected templates ("<def>methods</def>") can be declared via
    the <code>&lt;%method <var>method-name</var>&gt;</code>
    instruction.  A method is similar to a <def>def</def>, but is
    visible to all descendants of the declaring template.  Moreover,
    a method declared in an ancestor template can be overriddden via
    the <code>&lt;%override <var>method-name</var>&gt;</code>
    instruction.  Overridden methods take the same arguments as the
    method they override, although, as with template inheritance,
    only those args declared in an <code>&lt;%xargs&gt;</code>
    ... <code>&lt;/%xargs&gt;</code> block will be visible within
    the body of the override.  Finally, an ancestor template may
    declare an "abstract" protected subtemplate by using
    <code>&lt;%absmeth <var>method-name</var>&gt;
    ... &lt;/%absmeth&gt;</code>.  The only things allowed inside an
    <code>&lt%absmeth&gt;</code> block are
    <code>&lt;%args&gt;</code> blocks and <code>&lt%frag&gt</code>
    blocks.  It is an error for a non-abstract template to extend
    (directly or indirectly) a template with an abstract method, and
    not have that method overridden by the non-abstract template, or
    one of it's intermediate ancestors.

    For example, suppose <code>/weather/Report</code> contains:
    <& _TemplateInclude: "/templates/weather/Report" &>

    Then <code>/weather/Sunny</code> might contain:
    <& _TemplateInclude: "/templates/weather/Sunny" &>

    resulting in something like
    <pre class="tty"><&| escape//Html &>
<& /weather/Sunny: new weather.WeatherReport("Monday", "Miami") &></&></pre>

    However, <code>/weather/StormWarning</code> could contain:
    <& _TemplateInclude: "/templates/weather/StormWarning" &>
    resulting in something like
    <pre class="tty"><&| escape//Html &>
<& /weather/Sunny: new weather.WeatherReport("Friday", "Boston") &></&></pre>

  <li><span class="concept">Fragment arguments</span>

    It is possible to pass a "fragment" of a template as an argument
    to a template or subtemplate.  When passing template fragments,
    the invocation syntax must look like
    <code>&lt;&amp;| <var>target</var>; arg1 =&gt; ... &amp;&gt;</code>,
    and any template content up until a closing
    <code>&lt;/&amp;&gt;</code> is considered the fragment argument.

    <p>

    In order to pass a fragment argument, the target template or
    subtemplate must declare that it expects a fragment
    argument. This is done using the
    <code>&lt;%frag <var>name</var>/&gt;</code>
    declaration, which declares that the template or subtemplate
    expects a fragment argument.

    <p>

    The fragment can be invoked in the target template or
    subtemplate like any other template or subtemplate invocation,
    simply specifying the name of the fragment argument as the
    target

    <p>

    Putting this all together, the template
    <& _TemplateInclude:
           "/templates/org/jamon/doc/reference/fragExample" &>
    produces
    <pre class="tty"><&| escape//Html &><& reference/fragExample &></&></pre>

  <li><span class="concept">Parametrized fragment arguments</span>

    Template fragments can themselves take arguments.  The
    invocation syntax is similar to a regular template fragment with
    the addition of an
    <code>&lt;%args&gt;</code>...<code>&lt;/%args&gt;</code> inside
    the fragment.

    <p>

    To pass a parameterized template fragment to a template or
    subtemplate, the fragment and its parameters must be
    declared via a <code>&lt;%frag
    <var>name</var>&gt;</code> <var>parameters</var> <code>&lt;/%frag&gt;</code>,
    where each parameter is a type followed by an identifier. Thus
    a <code>&lt;%frag
    <var>name</var>&gt;</code>...<code>&lt;/%frag&gt;</code> is similar
    to a
    <code>&lt;%args&gt;</code>...<code>&lt;/%args&gt;</code> except
    it has a name and its parameters cannot have default values.
    Inside the template or subtemplate, the parameterized
    fragment is invoked exactly like a call to a subtemplate
    whose name is the name of the fragment.

    <p>

    For example <& _TemplateInclude:
      "/templates/org/jamon/doc/reference/paramFragExample" &>
    produces
    <pre class="tty"><&| escape//Html &><& reference/paramFragExample &>\
    </&></pre>

</ol>
