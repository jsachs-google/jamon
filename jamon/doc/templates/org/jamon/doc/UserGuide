<&| _Base; title => "Jamon User's Guide"; section => "Documentation" &>

<h2>User Guide</h2>

    <h3>Invoking templates from Java</h3>

    <ol>
      <li>
        First, make sure you have preprocessed the top-level templates
        into their Java equivalents.
      </li>
      <li>
        When building your project, be sure to include the generated
        source files in the build process.
      </li>
      <li>
        Create a TemplateManager instance (e.g. the
        StandardTemplateManager), and configure it appropriately
      </li>
      <li>
        Create an instance of the template, call
        <code>writeTo()</code> with a <code>Writer</code>, set any
        optional arguments, and invoke its render method.
      </li>
    </ol>
    <h4>Example</h4>

    Suppose the template in
    <code>templates/org/modusponens/templates/Foo</code> contains

    <pre class="template"><&| /org/jamon/escape/Html &><%LITERAL>
<%args>
  int count;
  String name => "Somebody";
  String greeting;
</%args>
<html>
  <body>
%   for (int i = 1; i <= count; ++i) {
    <% i %>. <% greeting %> <% name %> <br />
%   }
  </body>
</html></%LITERAL></&></pre>
    This can be processed into a Java interface with the
    Jamon <code>TemplateProcessor</code> class, e.g.
  <pre class="tty">
java org.jamon.TemplateProcessor \
     --destDir=./gensrc \
     --sourceDir=templates \
     templates/org/modusponens/templates/Foo
</pre>
which will place the generated Java source file(s) into the
<code>gensrc</code> directory.
<p>
You can then use the template as follows:
        <pre class="code">
import org.modusponens.templates.Foo;
import org.jamon.TemplateManager;

  ...
       StandardTemplateManager templateManager =
         new StandardTemplateManager(...);
       // to be able to dynamically recompile templates:
       //    templateManager.setSourceDir("templates");
       //    templateManager.setWorkDir("jamonwork");
       ...
       Writer writer = new OutputStreamWriter(System.out);
       new Foo(templateManager)
         .writeTo(writer)
         .setName("Duke & Co.")
         .render(3, "Hello");
</pre>
    <p>
      When you build your project, be sure to include the java files
      in the <code>gensrc</code> directory in the compilation command.
    <p>
      Execution of the above code snippet produces the output
    <pre class="tty"><&| /org/jamon/escape/Html &>
<html>
  <body>
    1. Hello Duke &amp; Co.<br />
    2. Hello Duke &amp; Co.<br />
    3. Hello Duke &amp; Co.<br />
  </body>
</html></&></pre>

<h3>Changing the default escaping mechanism</h3>

Suppose the we wanted to include some text for inclusion in an
email.  Since we are producing plain text (and not HTML) we want a
different default escaping mechanism.  For example

    <pre class="template"><&| /org/jamon/escape/Html &><%LITERAL>
<%args>
  int count;
  String name => "Somebody";
  String greeting;
</%args>
    Many Greetings
    ==============
%   for (int i = 1; i <= count; ++i) {
    <% i %>. <% greeting %> <% name %>
%   }
</%LITERAL></&></pre>
Could be called from Java as follows
        <pre class="code">
import org.modusponens.templates.Foo;
import org.jamon.TemplateManager;
<b>import org.jamon.Escaping;</b>

  ...
       StandardTemplateManager templateManager =
         new StandardTemplateManager(...);
       // to be able to dynamically recompile templates:
       //    templateManager.setSourceDir("templates");
       //    templateManager.setWorkDir("jamonwork");
       ...
       Writer writer = new OutputStreamWriter(System.out);
       new Foo(templateManager)
         .writeTo(writer)
         <b>.escaping(Escaping.NONE)</b>
         .setName("Duke & Co.")
         .render(3, "Hello");
</pre>
(Note how we set the escaping mechanism.)  It would emit
    <pre class="tty">
    Many Greetings
    ==============
    1. Hello Duke &amp; Co.
    2. Hello Duke &amp; Co.
    3. Hello Duke &amp; Co.
</pre>

The available escaping mechanisms are:
<code>Escaping.NONE</code>, <code>Escaping.HTML</code>,
<code>Escaping.STRICT_HTML</code>, <code>Escaping.URL</code>
and <code>Escaping.XML</code>.

See the <a href="Reference.html">template reference manual</a> for
further details.

</&>
