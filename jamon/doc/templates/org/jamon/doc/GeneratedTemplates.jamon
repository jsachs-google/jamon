<&| _Base; title => "Jamon Generated Templates"; section => "Documentation" &>

<h2>Generated Template Classes</h2>

  Generated classes are the output of the processor, and have the
  following relationships to the template sources:
  <ul>
    <li>
      The class name is the same as the name of the template
      source file excluding any filename extension (i.e. a suffix
      starting with '.')
    </li>
    <li>
      The package of the class maps directly to the directory path
      from the template source directory to the template.
    </li>
    <li>
      The generated class has a <code>render</code> method whose
      arguments are the required arguments declared in the
      template. The order of declaration in the template
      determines the order in the <code>render</code> method.
    </li>
    <li>
      A <code>makeRenderer</code> method taking the same parameters as <code>render</code>
    <!-- make mention of makeRenderable -->
    <li>
      Optional arguments in the template
      generate <code>setXXX<code> methods in the class.
    </li>
  </ul>

For example, suppose there is a template <code>MyTmpl</code> in the
directory <code>tmpls/org/foo</code>, the template source directory is
set to <code>tmpls</code>, and <code>MyTmpl</code> contains the
declarations

<pre><&| /org/jamon/escape/Html &><%LITERAL><%args>
  int i;
  String s => "yes";
  java.math.BigDecimal someNumber => null;
  boolean b;
</%args></%LITERAL></&></pre>

A simplified sketch (showing only the pertinent public methods) of the
generated class would be:

<pre class="java"><&| /org/jamon/escape/Html &>\
  package org.foo;

  import org.jamon.escaping.Escaping;

  public class MyTmpl
    extends org.jamon.AbstractTemplateProxy
  {
    public void render(int i, boolean b)
      throws java.io.IOException { ... }

    public Renderer makeRenderer(int i, boolean b)
      throws java.io.IOException { ... }

    public MyTmpl setS(String s)
      throws java.io.IOException { ... }

    public MyTmpl setSomeNumber(java.math.BigDecimal someNumber)
      throws java.io.IOException { ... }

    public MyTmpl writeTo(java.io.Writer p_writer)
      throws java.io.IOException { ... }

    public MyTmpl escaping(Escaping escaping) { ... }

  }</&></pre>

An instantiated template is a <b>thread-safe</b> object, and may
safely be used by concurrent threads.

</&>
