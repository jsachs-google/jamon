<%extends _Base>
<%override title>Jamon Generated Templates</%override>
<%class>
  protected Section currentSection() { return Section.DOCUMENTATION; }
</%class>

<h2>Generated Template Classes</h2>

Jamon templates are translated into Java classes, either by using the
<a href="JamonTask.html">Jamon ant task</a>, or by executing the
<a href="javadoc/org/jamon/TemplateProcessor.html">TemplateProcessor</a>
class. These generated classes have the following relationships to the
template sources:
<ul>
  <li>
    The class name is the same as the name of the template source file
    excluding any filename extension (i.e. a suffix starting with
    '.').
  </li>
  <li>
    The package of the class maps directly to the directory path from
    the template source directory to the template.
  </li>
  <li>
    The generated class has a <code>render</code> method whose
    arguments are the required arguments declared in the template. The
    order of declaration in the <code>render</code> method is the same
    as the order of declaration in the template.
  </li>
  <li>
    The generated class has a <code>makeRenderer</code> method taking
    the same parameters as <code>render</code>
  <li>
    Optional arguments in the template
    generate <code>setXXX</code> methods in the class.
  </li>
</ul>

For example, suppose there is a template <code>MyTemplate</code> in the
directory <code>tmpls/org/foo</code>, the template source directory is
set to <code>tmpls</code>, and <code>MyTemplate</code> contains the
declarations

<pre><&| /org/jamon/escape/Html &><%LITERAL><%args>
  int i;
  String s => "yes";
  java.math.BigDecimal someNumber => null;
  boolean b;
</%args></%LITERAL></&></pre>

A simplified sketch (showing only the pertinent public methods) of the
generated class would be:

<pre class="java"><&| /org/jamon/escape/Html &>\
  package org.foo;

  import org.jamon.TemplateManager;
  import org.jamon.escaping.Escaping;

  public class MyTemplate
    extends org.jamon.AbstractTemplateProxy
  {
    public MyTemplate() { ... }
    public MyTemplate(TemplateManager manager) { ... }

    public void render(int i, boolean b)
      throws java.io.IOException { ... }

    public Renderer makeRenderer(int i, boolean b)
      throws java.io.IOException { ... }

    public MyTemplate setS(String s) { ... }

    public MyTemplate setSomeNumber(java.math.BigDecimal someNumber) { ... }

    public MyTemplate writeTo(java.io.Writer p_writer) { ... }

    public MyTemplate escapeWith(Escaping escaping) { ... }

    public MyTemplate autoFlush(boolean autoFlush) { ... }

  }</&></pre>

If one template inherits from another, then:
<ul>
  <li>
    The generated class of the parent template will be abstract, and
    will not have <code>render</code> or <code>makeRenderer</code>
    methods.
  </li>

  <li>
    The generated class of the child template will extend the
    generated class of the parent template.
  </li>

  <li>
    Any setter methods for optional arguments declared in the parent
    template will be declared to return the generated class for the
    parent, not the child.
  </li>

  <li>
    The generated class for the parent template will define a public
    abstract inner class named <code>ParentRenderer</code>, which will
    have:

    <ul>
      <li>
        A render method taking the required arguments for the parent
        template (including any required arguments for the parent
        template's ancestors, if any).
      </li>

      <li>
        <code>setXXX</code> methods for each of the parent template's
        optional arguments (including any optional arguments for the
        parent template's ancestors, if any).
      </li>

      <li>
        If the parent template itself extends another template (which
        we'll call the grandparent template), a
        <code>makeParentRender</code> method taking as arguments the
        required arguments declared by the parent template, and
        returning an object whose type is the inner
        <code>ParentRenderer</code> class of the grandparent
        template's generated class.
      </li>
    </ul>
  </li>

  <li>
    If the child template is a final template (i.e. does not contain a
    <code>&lt;&amp; *CHILD &amp;&gt;</code> call), then its generated
    class will contain a <code>makeParentRenderer</code> method which
    takes as arguments the required arguments declared by the child
    template, and returns an object whose type is the inner
    <code>ParentRenderer</code> class of the parent template's generated class.
  </li>
</ul>

For example, if <code>/org/foo/ParentTemplate</code> contained the
declarations

<pre><&| /org/jamon/escape/Html &><%LITERAL><%args>
  int i;
  String s => "yes";
  Integer count;
</%args></%LITERAL></&></pre>

then the generated class <code>org.foo.ParentTemplate</code> would look
something like:

<pre class="java"><&| /org/jamon/escape/Html &>\
  package org.foo;

  import org.jamon.escaping.Escaping;

  public abstract class ParentTemplate
    extends org.jamon.AbstractTemplateProxy
  {
    public ParentTemplate setS(String s) { ... }

    public abstract class ParentRenderer
    {
      public ParentTemplate setS(String s) { ... }

      public void render(int i, Integer count)
        throws java.io.IOException { ... }

      public ParentRenderer writeTo(java.io.Writer writer) { ... }

      public ParentRenderer escapeWith(Escaping escaping) { ... }

      public ParentRenderer autoFlush(boolean autoFlush) { ... }
    }
  }</&></pre>

Moreover, if <code>/org/foo/ChildTemplate</code> contained the
declarations

<pre><&| /org/jamon/escape/Html &><%LITERAL><%extends ParentTemplate>
<%args>
  long t;
  java.math.BigDecimal amount => new BigDecimal(0);
  double x;
</%args></%LITERAL></&></pre>

then the generated class <code>org.foo.ChildTemplate</code> would look
something like:

<pre class="java"><&| /org/jamon/escape/Html &>\
  package org.foo;

  import org.jamon.TemplateManager;
  import org.jamon.escaping.Escaping;

  public abstract class ChildTemplate
    extends org.foo.ParentTemplate
  {
    public ChildTemplate() { ... }
    public ChildTemplate(TemplateManager manager) { ... }

    public void render(int i, Integer count, long t, double x)
      throws java.io.IOException { ... }

    public Renderer makeRenderer(int i, Integer count, long t, double x)
      throws java.io.IOException { ... }

    public ChildTemplate setAmount(java.math.BigDecimal amount) { ... }

    public ChildTemplate writeTo(java.io.Writer p_writer) { ... }

    public ChildTemplate escapeWith(Escaping escaping) { ... }

    public ChildTemplate autoFlush(boolean autoFlush) { ... }

    public ParentTemplate.ParentRenderer makeParentRenderer(long t, double x)
      throws java.io.IOException { ... }
  }</&></pre>

An instantiated template may be used at most once.
