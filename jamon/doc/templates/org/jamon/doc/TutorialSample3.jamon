<%extends _DocumentationBase>
<%args>
  String output;
</%args>

<%override title>Jamon Tutorial - Template Arguments</%override>

<h2>Jamon Tutorial - Template Arguments</h2>

Templates do not exist in a vacuum; templates exist in order to
display information. In a model-view-controller architecture, that
information comes from the model, and it is passed to the templates to
be displayed as arguments to the template.
<p>

Jamon templates can have <em>required</em> arguments as well as
<em>optional</em> arguments. The required arguments constitute the
<em>signature</em> of the template exactly as the types of the
parameters of a method compose the signature of a method.
<p>
Arguments to a Jamon template are declared between <code>&lt;%args></code>
... <code>&lt;%/args></code> tags:
      <&| _template &>
<%LITERAL>
<%args>
  java.util.Date effectiveDate;
  String userName;
  java.math.BigDecimal totalBalance;
</%args>
</%LITERAL>
</&>
The above Jamon code declares a template with three parameters:
<ol>
<li> a java.util.Date instance
<li> a String
<li> a java.math.BigDecimal instance
</ol>

Any java class that invokes this template <strong>must</strong> provide
all three arguments, and they must be provided to the <code>render</code>
method in the order specified in the
<code>&lt;%args></code> ... <code>&lt;%/args></code> tag.

<h3> Optional Arguments </h3>
Jamon templates can also declare <em>optional</em> arguments. These are
declared by specifying the default value after the argument name, as below.

      <&| _template &>
<%LITERAL>
<%args>
  String         title => "Account Summary";
  java.util.Date effectiveDate;
  String         userName;
  java.math.BigDecimal totalBalance;
  String         alertMessage => "";
</%args>
</%LITERAL>
</&>

This template declares three required arguments, the same three as the
first example, and two optional arguments, <code>title</code> and
<code>alertMessage</code>.
<p>
<div class="note">Note: all arguments, both required and optional,
are translated into Java as <code>final</code> variables. Thus,
any Java code embedded in the Jamon text <strong>must not</strong> try
to reassign values to the template arguments.</div>
<p>
A java class that calls this template must provide the three required arguments to the render method in order specified in the
<code>&lt;%args></code> ... <code>&lt;%/args></code> tag.

<div class="note">Note: the optional arguments are ignored when
constructing the signature of the template.</div>

In order to set values of any optional arguments, the java class
invoking the template must call <code>set</code> methods for each
optional argument. Thus, to invoke the sample template shown above,
the java class should contain the following code:

      <&| _template; style => "java" &>
    sampleTemplate
        .setTitle("Most Recent Account Balance);
        .render(new OutputStreamWriter(System.out),
                new Date(), "John Public", new BigDecimal(9.99));
</&>

In the above example, the calling code sets the optional argument
<code>title</code>, does not change the default value for the optional
argument <code>alertMessage</code>, and then calls the render method
with the required <code>Writer</code> and the three required arguments.
<p>
<div class="note">Note that the <code>render</code>
method must be called <em>after</em> after the setter methods for the
optional arguments.</div>
<p>
As a matter of style, the code sample above <em>chains</em> calls to
template methods. Most template methods return either the template object
or an instance of an interface appropriate for the return type of the
method. This allows the programmer simply to chain calls to template
methods. The current jamon users have found this style of programming
easier to read.

<h3> Putting it all together</h3>
<ol>
<li>
Create a Jamon template
 <a href="AccountSummaryTemplate.jamon" class="file">
AccountSummaryTemplate.jamon</a>:
<pre class="template"><&| /org/jamon/escape/Html &><& AccountSummaryTemplate &></&></pre>


<li> Write a java class to call the template:
<a class="file" href="AccountSummaryTut3.java">AccountSummaryTut3.java</a>:
<pre class="java"><&| /org/jamon/escape/Html &><& AccountSummaryTut3Java &></&></pre>

<li> Set the classpath, process the template, compile, and run the program:
<pre class="tty">
    export CLASSPATH=.:/path/to/jamon.jar
    java org.jamon.TemplateProcessor --destDir=. AccountSummaryTemplate
    javac AccountSummaryTut3.java AccountSummaryTemplate*.java
    java AccountSummaryTut3
</pre>

<li> You should see:
<pre class="tty"><% output %></pre>

</ol>

<p>
&nbsp;

<%def _template>
<%args>
  String style => "template";
</%args>
<%frag content></%frag>
<pre class="<% style %>"><&| /org/jamon/escape/Html &><& content &></&></pre>
</%def>
