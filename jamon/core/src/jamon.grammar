Package
  org.modusponens.jtt;

Helpers
  letter = ['a'..'z'] | ['A'..'Z'];
  digit = ['0'..'9'];
  letter_or_digit = letter | digit | '_';
  period = '.';
  ht  = 0x0009;
  lf  = 0x000a;
  ff  = 0x000c;
  cr  = 0x000d;
  sp  = ' ';
  nl = lf | cr | cr lf;
  hs = sp | ht;
  ws = hs | lf | ff;

  percent = '%';
  all = [0x0000 .. 0xFFFF];
  all_except_nl = [all - [lf + cr]];

States
  body,
  imports,
  emit,
  java,
  jline,
  call,
  argexp,
  args;

Tokens
  {body -> args} args_start = '<%args>';
  {args -> body} args_end = '</%args>';
  {body -> imports} import_start = '<%import>';
  {imports -> body} import_end = '</%import>';
  {body -> call} call_start = '<&' ws*;
  {call -> body} call_end = ws* '&>';
  {body -> java} java_start = '<%java>';
  {java -> body} java_end = '</%java>';
  {args,imports} dot = period;
  {args -> argexp} arrow = '=>';
  {call,args,imports} white_space = ws*;
  {call,args,imports} identifier = letter letter_or_digit*;


  {body -> emit} emit_start = '<%' ws*;
  {emit -> body} emit_end = ws* '%>';

  // this isn't quite right -- it doesn't handle the first line of a file
  {body -> jline} injava = nl percent hs*;
  {jline -> body} outjava = hs* nl;
  {jline,argexp} fragment = all_except_nl*;
  {argexp -> args} donearg = hs* nl;

  {body,emit,java} any = all;
  {args} brackets = '[' (hs)* ']';

Ignored Tokens

  white_space;

Productions

  template = component*;

  component = {body} any
            | {imports} import_start name* import_end
            | {args} args_start arg* args_end
            | {java} java_start any* java_end
            | {jline} injava fragment outjava
            | {emit} emit_start any* emit_end
            | {call} call_start name call_end
            ;

  arg = type [name]: identifier default?;

  default = arrow fragment donearg;

  name = {simple} identifier
       | {qualified} name dot identifier;

  emit_expr = any;

  type = name brackets*;
