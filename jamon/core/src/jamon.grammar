/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Jamon code, released October, 2002.
 *
 * The Initial Developer of the Original Code is Jay Sachs.  Portions
 * created by Jay Sachs are Copyright (C) 2002 Jay Sachs.  All Rights
 * Reserved.
 *
 * Contributor(s):
 */

Package
  org.jamon;

Helpers
  lower = ['a'..'z'];
  upper = ['A'..'Z'];
  letter = [[lower + upper] + '_'];
  digit = ['0'..'9'];
  letter_or_digit = letter | digit;
  period = '.';
  ht  = 0x0009;
  lf  = 0x000a;
  ff  = 0x000c;
  cr  = 0x000d;
  sp  = ' ';
  nl = lf | cr | cr lf;
  hs = [sp + ht];
  ws = [[[hs + lf] + ff] + cr];
  argsep = ';'; // could be nl ...
  all = [0x0000 .. 0xFFFF];
  all_except_nl = [all - [lf + cr]];
  q = '"';
  bs = '\';
  pipe = '|';
  quoted = q ([all-[q+bs]]* | (bs all))* q;
  gt = '>';
  lt = '<';
  pct = '%';
  slash = '/';
  hash = '#';

States
  start,
  body,
  def,
  imports,
  emit,
  class,
  java,
  jline,
  call,
  argexp,
  callexp,
  args,
  escape,
  farginit;

Tokens

  {start -> farginit,body -> farginit} farg_start_begin = '<%farg';
  {farginit -> args} farg_start_done = '>';
  {args -> body} args_end = '</%args>';
  {args -> body} farg_end = '</%farg>';
  {start ->class,body -> class} class_start = '<%class>' ws*;
  {class -> body} class_end = ws* '</%class>';
  {start -> args, body -> args} args_start = '<%args>';
  {start ->imports,body -> imports} import_start = '<%import>';
  {imports -> body} import_end = '</%import>';
  {start ->java,body -> java} java_start = '<%java>' ws*;
  {java -> body} java_end = ws* '</%java>';
  {args,imports} dot = period;
  {args -> argexp} arrow = '=>' hs*;
  {call,args,farginit,imports} white_space = ws*;
  {call,args,farginit,imports,def} identifier = letter letter_or_digit*;

  {start -> emit,body -> emit} emit_start = '<%' ws+;
  {emit -> body, escape -> body} emit_end = ws* '%>';
  {emit -> escape} escape_delimiter = hash;
  {escape} escape_code = letter;

  {emit} emit_expr =
      ( [all - [[[q + pct] + pipe] + hash]]
      | quoted
      | pct [all - gt]
      )*;

  {start -> jline} injava = pct hs*;
  {jline -> start} outjava = hs* nl;
  {jline} expr = all_except_nl*;
   // fixme: line ending ...
  {argexp} argexpr = ([all - [argsep+q]] | quoted)*;
  {argexp -> args,args} donearg = hs* argsep ws*;

  {java} java_stmts =
       ( [all - [q + lt]]
       | quoted
       | '<' [all - slash]
       | '</' [all - '%']
       | '</%' [all - 'j']
       | '</%j' [all - 'a']
       | '</%ja' [all - 'v']
       | '</%jav' [all - 'a']
       | '</%java' [all - gt] )*;

  {class} class_content =
       ( [all - [q + lt]]
       | quoted
       | '<' [all - slash]
       | '</' [all - '%']
       | '</%' [all - 'c']
       | '</%c' [all - 'l']
       | '</%cl' [all - 'a']
       | '</%cla' [all - 's']
       | '</%clas' [all - 's']
       | '</%class' [all - gt] )*;

  {body,start -> body} text = all_except_nl;
  {start,body -> start} newline = nl;

  {args} brackets = '[' (hs)* ']';
  {start -> body,body} fragment_call_end = '</&>';
  {call -> callexp} carrow = '=>' hs*;
  {start -> call, body -> call} fragment_call_start = '<&|' ws*;
  {start -> call,body -> call} call_start = '<&' ws*;
  {call -> body} call_end = ws* '&>';
  {callexp -> call} param_expr =
       ([all - [argsep + [q + '&']]] | quoted | '&' [all - '>'])*;
  {call,imports} semi = ';';
  {call} pathsep = slash;

  {start -> def,body -> def} def_start = '<%def' hs+;
  {body,start} def_end = '</%def>';
  {def -> body} gt = hs* gt;

  {start -> body,body} doc =
       '<%doc>' ([all - '<']
              | '<' [all-slash]
              | '</' [all-'%']
              | '</%' [all-'d']
              | '</%d' [all-'o']
              | '</%do' [all-'c']
              | '</%doc' [all-'>'])* '</%doc>';

Ignored Tokens

  white_space,doc;

Productions

  template = component* partial_jline? ;

  base_component =
              {body} text
            | {newline} newline
            | {java} java
            | {jline} jline
            | {emit} emit
            | {call} call
            | {fragment_call} fragment_call
            | {args} args
            | {farg} farg
            ;

  component = base_component
            | {imports} imports
            | {def} def
            | {class} class_tag
            ;

  def = def_start identifier gt base_component* def_end;

  call = call_start path param* call_end;

  fragment_call = fragment_call_start path param* call_end base_component* fragment_call_end;

  imports = import_start import* import_end;

  import = name semi;

  args = args_start arg* args_end;

  class_tag = class_start class_content* class_end;

  farg = farg_start arg* farg_end;

  farg_start = farg_start_begin identifier farg_start_done;

  java = java_start java_stmts java_end;

  jline = injava expr outjava;

  partial_jline = injava expr;

  emit = emit_start emit_expr escape? emit_end;

  escape = escape_delimiter escape_code;

  path = {simple} pathsep? identifier | {qualified} path pathsep identifier;

  arg = type [name]: identifier default? donearg;

  param = semi identifier carrow param_expr;

  default = arrow argexpr;

  name = {simple} identifier
       | {qualified} name dot identifier;

  type = name brackets*;
